{"version":3,"file":"body-pix.js","sources":["../src/decode_part_map.ts","../src/base_model.ts","../src/mobilenet.ts","../src/keypoints.ts","../src/multi_person/util.ts","../src/multi_person/decode_multiple_masks_cpu.ts","../src/multi_person/decode_multiple_masks_webgl.ts","../src/multi_person/decode_instance_masks.ts","../src/multi_person/max_heap.ts","../src/multi_person/build_part_with_score_queue.ts","../src/multi_person/decode_pose.ts","../src/multi_person/decode_multiple_poses.ts","../src/resnet.ts","../src/saved_models.ts","../src/util.ts","../src/body_pix_model.ts","../src/blur.ts","../src/output_rendering_util.ts","../src/part_channels.ts","../src/version.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\n\n/**\n * Takes the sigmoid of the part heatmap output and generates a 2d one-hot\n * tensor with ones where the part's score has the maximum value.\n *\n * @param partHeatmapScores\n */\nfunction toFlattenedOneHotPartMap(partHeatmapScores: tf.Tensor3D): tf.Tensor2D {\n  const numParts = partHeatmapScores.shape[2];\n  const partMapLocations = partHeatmapScores.argMax(2);\n\n  const partMapFlattened = partMapLocations.reshape([-1]);\n\n  return tf.oneHot(partMapFlattened, numParts) as tf.Tensor2D;\n}\n\nfunction clipByMask2d(image: tf.Tensor2D, mask: tf.Tensor2D): tf.Tensor2D {\n  return image.mul(mask);\n}\n\n/**\n * Takes the sigmoid of the segmentation output, and generates a segmentation\n * mask with a 1 or 0 at each pixel where there is a person or not a person. The\n * segmentation threshold determines the threshold of a score for a pixel for it\n * to be considered part of a person.\n * @param segmentScores A 3d-tensor of the sigmoid of the segmentation output.\n * @param segmentationThreshold The minimum that segmentation values must have\n * to be considered part of the person.  Affects the generation of the\n * segmentation mask and the clipping of the colored part image.\n *\n * @returns A segmentation mask with a 1 or 0 at each pixel where there is a\n * person or not a person.\n */\nexport function toMaskTensor(\n    segmentScores: tf.Tensor2D, threshold: number): tf.Tensor2D {\n  return tf.tidy(\n      () =>\n          (segmentScores.greater(tf.scalar(threshold)).toInt() as tf.Tensor2D));\n}\n\n/**\n * Takes the sigmoid of the person and part map output, and returns a 2d tensor\n * of an image with the corresponding value at each pixel corresponding to the\n * part with the highest value. These part ids are clipped by the segmentation\n * mask. Wherever the a pixel is clipped by the segmentation mask, its value\n * will set to -1, indicating that there is no part in that pixel.\n * @param segmentScores A 3d-tensor of the sigmoid of the segmentation output.\n * @param partHeatmapScores A 3d-tensor of the sigmoid of the part heatmap\n * output. The third dimension corresponds to the part.\n *\n * @returns A 2d tensor of an image with the corresponding value at each pixel\n * corresponding to the part with the highest value. These part ids are clipped\n * by the segmentation mask.  It will have values of -1 for pixels that are\n * outside of the body and do not have a corresponding part.\n */\nexport function decodePartSegmentation(\n    segmentationMask: tf.Tensor2D,\n    partHeatmapScores: tf.Tensor3D): tf.Tensor2D {\n  const [partMapHeight, partMapWidth, numParts] = partHeatmapScores.shape;\n  return tf.tidy(() => {\n    const flattenedMap = toFlattenedOneHotPartMap(partHeatmapScores);\n    const partNumbers = tf.range(0, numParts, 1, 'int32').expandDims(1);\n\n    const partMapFlattened =\n        flattenedMap.matMul(partNumbers as tf.Tensor2D).toInt();\n\n    const partMap = partMapFlattened.reshape([partMapHeight, partMapWidth]);\n\n    const partMapShiftedUpForClipping = partMap.add(tf.scalar(1, 'int32'));\n\n    return clipByMask2d(\n               partMapShiftedUpForClipping as tf.Tensor2D, segmentationMask)\n        .sub(tf.scalar(1, 'int32'));\n  });\n}\n\nexport function decodeOnlyPartSegmentation(partHeatmapScores: tf.Tensor3D):\n    tf.Tensor2D {\n  const [partMapHeight, partMapWidth, numParts] = partHeatmapScores.shape;\n  return tf.tidy(() => {\n    const flattenedMap = toFlattenedOneHotPartMap(partHeatmapScores);\n    const partNumbers = tf.range(0, numParts, 1, 'int32').expandDims(1);\n\n    const partMapFlattened =\n        flattenedMap.matMul(partNumbers as tf.Tensor2D).toInt();\n\n    return partMapFlattened.reshape([partMapHeight, partMapWidth]);\n  });\n}\n","\n/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfconv from '@tensorflow/tfjs-converter';\nimport * as tf from '@tensorflow/tfjs-core';\nimport {BodyPixOutputStride} from './types';\n\n/**\n * BodyPix supports using various convolution neural network models\n * (e.g. ResNet and MobileNetV1) as its underlying base model.\n * The following BaseModel interface defines a unified interface for\n * creating such BodyPix base models. Currently both MobileNet (in\n * ./mobilenet.ts) and ResNet (in ./resnet.ts) implements the BaseModel\n * interface. New base models that conform to the BaseModel interface can be\n * added to BodyPix.\n */\nexport abstract class BaseModel {\n  constructor(\n      protected readonly model: tfconv.GraphModel,\n      public readonly outputStride: BodyPixOutputStride) {\n    const inputShape =\n        this.model.inputs[0].shape as [number, number, number, number];\n    tf.util.assert(\n        (inputShape[1] === -1) && (inputShape[2] === -1),\n        () => `Input shape [${inputShape[1]}, ${inputShape[2]}] ` +\n            `must both be equal to or -1`);\n  }\n\n  abstract preprocessInput(input: tf.Tensor3D): tf.Tensor3D;\n\n  /**\n   * Predicts intermediate Tensor representations.\n   *\n   * @param input The input RGB image of the base model.\n   * A Tensor of shape: [`inputResolution`, `inputResolution`, 3].\n   *\n   * @return A dictionary of base model's intermediate predictions.\n   * The returned dictionary should contains the following elements:\n   * - heatmapScores: A Tensor3D that represents the keypoint heatmap scores.\n   * - offsets: A Tensor3D that represents the offsets.\n   * - displacementFwd: A Tensor3D that represents the forward displacement.\n   * - displacementBwd: A Tensor3D that represents the backward displacement.\n   * - segmentation: A Tensor3D that represents the segmentation of all\n   * people.\n   * - longOffsets: A Tensor3D that represents the long offsets used for\n   * instance grouping.\n   * - partHeatmaps: A Tensor3D that represents the body part segmentation.\n   */\n  predict(input: tf.Tensor3D): {\n    heatmapScores: tf.Tensor3D,\n    offsets: tf.Tensor3D,\n    displacementFwd: tf.Tensor3D,\n    displacementBwd: tf.Tensor3D,\n    segmentation: tf.Tensor3D,\n    partHeatmaps: tf.Tensor3D,\n    longOffsets: tf.Tensor3D,\n    partOffsets: tf.Tensor3D\n  } {\n    return tf.tidy(() => {\n      const asFloat = this.preprocessInput(input.toFloat());\n      const asBatch = asFloat.expandDims(0);\n      const results = this.model.predict(asBatch) as tf.Tensor4D[];\n      const results3d: tf.Tensor3D[] = results.map(y => y.squeeze([0]));\n      const namedResults = this.nameOutputResults(results3d);\n\n      return {\n        heatmapScores: namedResults.heatmap.sigmoid(),\n        offsets: namedResults.offsets,\n        displacementFwd: namedResults.displacementFwd,\n        displacementBwd: namedResults.displacementBwd,\n        segmentation: namedResults.segmentation,\n        partHeatmaps: namedResults.partHeatmaps,\n        longOffsets: namedResults.longOffsets,\n        partOffsets: namedResults.partOffsets\n      };\n    });\n  }\n\n  // Because MobileNet and ResNet predict() methods output a different order for\n  // these values, we have a method that needs to be implemented to order them.\n  abstract nameOutputResults(results: tf.Tensor3D[]): {\n    heatmap: tf.Tensor3D,\n    offsets: tf.Tensor3D,\n    displacementFwd: tf.Tensor3D,\n    displacementBwd: tf.Tensor3D,\n    segmentation: tf.Tensor3D,\n    partHeatmaps: tf.Tensor3D,\n    longOffsets: tf.Tensor3D,\n    partOffsets: tf.Tensor3D\n  };\n\n  /**\n   * Releases the CPU and GPU memory allocated by the model.\n   */\n  dispose() {\n    this.model.dispose();\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\n\nimport {BaseModel} from './base_model';\n\nexport class MobileNet extends BaseModel {\n  preprocessInput(input: tf.Tensor3D): tf.Tensor3D {\n    // Normalize the pixels [0, 255] to be between [-1, 1].\n    return tf.tidy(() => tf.div(input, 127.5).sub(1.0));\n  }\n\n  nameOutputResults(results: tf.Tensor3D[]) {\n    const [\n      offsets,\n      segmentation,\n      partHeatmaps,\n      longOffsets,\n      heatmap,\n      displacementFwd,\n      displacementBwd,\n      partOffsets,\n  ] = results;\n    return {\n      offsets,\n      segmentation,\n      partHeatmaps,\n      longOffsets,\n      heatmap,\n      displacementFwd,\n      displacementBwd,\n      partOffsets\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport type Tuple<T> = [T, T];\nexport type StringTuple = Tuple<string>;\nexport type NumberTuple = Tuple<number>;\n\nexport const PART_NAMES = [\n  'nose', 'leftEye', 'rightEye', 'leftEar', 'rightEar', 'leftShoulder',\n  'rightShoulder', 'leftElbow', 'rightElbow', 'leftWrist', 'rightWrist',\n  'leftHip', 'rightHip', 'leftKnee', 'rightKnee', 'leftAnkle', 'rightAnkle'\n];\n\nexport const NUM_KEYPOINTS = PART_NAMES.length;\n\nexport interface NumberDict {\n  [jointName: string]: number;\n}\n\nexport const PART_IDS =\n    PART_NAMES.reduce((result: NumberDict, jointName, i): NumberDict => {\n      result[jointName] = i;\n      return result;\n    }, {}) as NumberDict;\n\nconst CONNECTED_PART_NAMES: StringTuple[] = [\n  ['leftHip', 'leftShoulder'], ['leftElbow', 'leftShoulder'],\n  ['leftElbow', 'leftWrist'], ['leftHip', 'leftKnee'],\n  ['leftKnee', 'leftAnkle'], ['rightHip', 'rightShoulder'],\n  ['rightElbow', 'rightShoulder'], ['rightElbow', 'rightWrist'],\n  ['rightHip', 'rightKnee'], ['rightKnee', 'rightAnkle'],\n  ['leftShoulder', 'rightShoulder'], ['leftHip', 'rightHip']\n];\n\n/*\n * Define the skeleton. This defines the parent->child relationships of our\n * tree. Arbitrarily this defines the nose as the root of the tree, however\n * since we will infer the displacement for both parent->child and\n * child->parent, we can define the tree root as any node.\n */\nexport const POSE_CHAIN: StringTuple[] = [\n  ['nose', 'leftEye'], ['leftEye', 'leftEar'], ['nose', 'rightEye'],\n  ['rightEye', 'rightEar'], ['nose', 'leftShoulder'],\n  ['leftShoulder', 'leftElbow'], ['leftElbow', 'leftWrist'],\n  ['leftShoulder', 'leftHip'], ['leftHip', 'leftKnee'],\n  ['leftKnee', 'leftAnkle'], ['nose', 'rightShoulder'],\n  ['rightShoulder', 'rightElbow'], ['rightElbow', 'rightWrist'],\n  ['rightShoulder', 'rightHip'], ['rightHip', 'rightKnee'],\n  ['rightKnee', 'rightAnkle']\n];\n\nexport const CONNECTED_PART_INDICES = CONNECTED_PART_NAMES.map(\n    ([jointNameA, jointNameB]) =>\n        ([PART_IDS[jointNameA], PART_IDS[jointNameB]]));\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NUM_KEYPOINTS} from '../keypoints';\nimport {Padding, Part, TensorBuffer3D, Vector2D} from '../types';\n\nexport function getScale(\n    [height, width]: [number, number],\n    [inputResolutionY, inputResolutionX]: [number, number],\n    padding: Padding): [number, number] {\n  const {top: padT, bottom: padB, left: padL, right: padR} = padding;\n  const scaleY = inputResolutionY / (padT + padB + height);\n  const scaleX = inputResolutionX / (padL + padR + width);\n  return [scaleX, scaleY];\n}\n\nexport function getOffsetPoint(\n    y: number, x: number, keypoint: number, offsets: TensorBuffer3D): Vector2D {\n  return {\n    y: offsets.get(y, x, keypoint),\n    x: offsets.get(y, x, keypoint + NUM_KEYPOINTS)\n  };\n}\n\nexport function getImageCoords(\n    part: Part, outputStride: number, offsets: TensorBuffer3D): Vector2D {\n  const {heatmapY, heatmapX, id: keypoint} = part;\n  const {y, x} = getOffsetPoint(heatmapY, heatmapX, keypoint, offsets);\n  return {\n    x: part.heatmapX * outputStride + x,\n    y: part.heatmapY * outputStride + y\n  };\n}\n\nexport function fillArray<T>(element: T, size: number): T[] {\n  const result: T[] = new Array(size);\n\n  for (let i = 0; i < size; i++) {\n    result[i] = element;\n  }\n\n  return result;\n}\n\nexport function clamp(a: number, min: number, max: number): number {\n  if (a < min) {\n    return min;\n  }\n  if (a > max) {\n    return max;\n  }\n  return a;\n}\n\nexport function squaredDistance(\n    y1: number, x1: number, y2: number, x2: number): number {\n  const dy = y2 - y1;\n  const dx = x2 - x1;\n  return dy * dy + dx * dx;\n}\n\nexport function addVectors(a: Vector2D, b: Vector2D): Vector2D {\n  return {x: a.x + b.x, y: a.y + b.y};\n}\n\nexport function clampVector(a: Vector2D, min: number, max: number): Vector2D {\n  return {y: clamp(a.y, min, max), x: clamp(a.x, min, max)};\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NUM_KEYPOINTS} from '../keypoints';\nimport {Padding, Pose} from '../types';\n\nimport {getScale} from './util';\n\ninterface Pair {\n  x: number;\n  y: number;\n}\n\nfunction computeDistance(embedding: Pair[], pose: Pose, minPartScore = 0.3) {\n  let distance = 0.0;\n  let numKpt = 0;\n  for (let p = 0; p < embedding.length; p++) {\n    if (pose.keypoints[p].score > minPartScore) {\n      numKpt += 1;\n      distance += (embedding[p].x - pose.keypoints[p].position.x) ** 2 +\n          (embedding[p].y - pose.keypoints[p].position.y) ** 2;\n    }\n  }\n  if (numKpt === 0) {\n    distance = Infinity;\n  } else {\n    distance = distance / numKpt;\n  }\n  return distance;\n}\n\nfunction convertToPositionInOuput(\n    position: Pair, [padT, padL]: [number, number],\n    [scaleX, scaleY]: [number, number], stride: number): Pair {\n  const y = Math.round(((padT + position.y + 1.0) * scaleY - 1.0) / stride);\n  const x = Math.round(((padL + position.x + 1.0) * scaleX - 1.0) / stride);\n  return {x, y};\n}\n\nfunction getEmbedding(\n    location: Pair, keypointIndex: number,\n    convertToPosition: (pair: Pair) => Pair, outputResolutionX: number,\n    longOffsets: Float32Array, refineSteps: number,\n    [height, width]: [number, number]): Pair {\n  const newLocation = convertToPosition(location);\n\n  const nn = newLocation.y * outputResolutionX + newLocation.x;\n  let dy = longOffsets[NUM_KEYPOINTS * (2 * nn) + keypointIndex];\n  let dx = longOffsets[NUM_KEYPOINTS * (2 * nn + 1) + keypointIndex];\n  let y = location.y + dy;\n  let x = location.x + dx;\n  for (let t = 0; t < refineSteps; t++) {\n    y = Math.min(y, height - 1);\n    x = Math.min(x, width - 1);\n    const newPos = convertToPosition({x, y});\n    const nn = newPos.y * outputResolutionX + newPos.x;\n    dy = longOffsets[NUM_KEYPOINTS * (2 * nn) + keypointIndex];\n    dx = longOffsets[NUM_KEYPOINTS * (2 * nn + 1) + keypointIndex];\n    y = y + dy;\n    x = x + dx;\n  }\n\n  return {x, y};\n}\n\nfunction matchEmbeddingToInstance(\n    location: Pair, longOffsets: Float32Array, poses: Pose[],\n    numKptForMatching: number, [padT, padL]: [number, number],\n    [scaleX, scaleY]: [number, number], outputResolutionX: number,\n    [height, width]: [number, number], stride: number,\n    refineSteps: number): number {\n  const embed: Pair[] = [];\n  const convertToPosition = (pair: Pair) =>\n      convertToPositionInOuput(pair, [padT, padL], [scaleX, scaleY], stride);\n\n  for (let keypointsIndex = 0; keypointsIndex < numKptForMatching;\n       keypointsIndex++) {\n    const embedding = getEmbedding(\n        location, keypointsIndex, convertToPosition, outputResolutionX,\n        longOffsets, refineSteps, [height, width]);\n\n    embed.push(embedding);\n  }\n\n  let kMin = -1;\n  let kMinDist = Infinity;\n  for (let k = 0; k < poses.length; k++) {\n    const dist = computeDistance(embed, poses[k]);\n    if (dist < kMinDist) {\n      kMin = k;\n      kMinDist = dist;\n    }\n  }\n  return kMin;\n}\n\nfunction getOutputResolution(\n    [inputResolutionY, inputResolutionX]: [number, number],\n    stride: number): [number, number] {\n  const outputResolutionX = Math.round((inputResolutionX - 1.0) / stride + 1.0);\n  const outputResolutionY = Math.round((inputResolutionY - 1.0) / stride + 1.0);\n  return [outputResolutionX, outputResolutionY];\n}\n\nexport function decodeMultipleMasksCPU(\n    segmentation: Uint8Array, longOffsets: Float32Array,\n    posesAboveScore: Pose[], height: number, width: number, stride: number,\n    [inHeight, inWidth]: [number, number], padding: Padding,\n    refineSteps: number, numKptForMatching = 5): Uint8Array[] {\n  const dataArrays =\n      posesAboveScore.map(x => new Uint8Array(height * width).fill(0));\n\n  const {top: padT, left: padL} = padding;\n\n  const [scaleX, scaleY] =\n      getScale([height, width], [inHeight, inWidth], padding);\n  const [outputResolutionX, ] =\n    getOutputResolution([inHeight, inWidth], stride);\n  for (let i = 0; i < height; i += 1) {\n    for (let j = 0; j < width; j += 1) {\n      const n = i * width + j;\n      const prob = segmentation[n];\n      if (prob === 1) {\n        const kMin = matchEmbeddingToInstance(\n            {x: j, y: i}, longOffsets, posesAboveScore, numKptForMatching,\n            [padT, padL], [scaleX, scaleY], outputResolutionX, [height, width],\n            stride, refineSteps);\n        if (kMin >= 0) {\n          dataArrays[kMin][n] = 1;\n        }\n      }\n    }\n  }\n\n  return dataArrays;\n}\n\nexport function decodeMultiplePartMasksCPU(\n    segmentation: Uint8Array, longOffsets: Float32Array,\n    partSegmentaion: Uint8Array, posesAboveScore: Pose[], height: number,\n    width: number, stride: number, [inHeight, inWidth]: [number, number],\n    padding: Padding, refineSteps: number,\n    numKptForMatching = 5): Int32Array[] {\n  const dataArrays =\n      posesAboveScore.map(x => new Int32Array(height * width).fill(-1));\n\n  const {top: padT, left: padL} = padding;\n\n  const [scaleX, scaleY] =\n      getScale([height, width], [inHeight, inWidth], padding);\n  const [outputResolutionX, ] =\n    getOutputResolution([inHeight, inWidth], stride);\n\n  for (let i = 0; i < height; i += 1) {\n    for (let j = 0; j < width; j += 1) {\n      const n = i * width + j;\n      const prob = segmentation[n];\n      if (prob === 1) {\n        const kMin = matchEmbeddingToInstance(\n            {x: j, y: i}, longOffsets, posesAboveScore, numKptForMatching,\n            [padT, padL], [scaleX, scaleY], outputResolutionX, [height, width],\n            stride, refineSteps);\n        if (kMin >= 0) {\n          dataArrays[kMin][n] = partSegmentaion[n];\n        }\n      }\n    }\n  }\n\n  return dataArrays;\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\n\nimport {NUM_KEYPOINTS} from '../keypoints';\nimport {Padding, Pose} from '../types';\nimport {getScale} from './util';\n\nexport function decodeMultipleMasksWebGl(\n    segmentation: tf.Tensor2D, longOffsets: tf.Tensor3D,\n    posesAboveScore: Pose[], height: number, width: number, stride: number,\n    [inHeight, inWidth]: [number, number], padding: Padding,\n    refineSteps: number, minKptScore: number,\n    maxNumPeople: number): tf.Tensor2D {\n  // The height/width of the image/canvas itself.\n  const [origHeight, origWidth] = segmentation.shape;\n  // The height/width of the output of the model.\n  const [outHeight, outWidth] = longOffsets.shape.slice(0, 2);\n\n  const shapedLongOffsets: tf.Tensor4D =\n      longOffsets.reshape([outHeight, outWidth, 2, NUM_KEYPOINTS]);\n\n  // Make pose tensor of shape [MAX_NUM_PEOPLE, NUM_KEYPOINTS, 3] where\n  // the last 3 coordinates correspond to the score, h and w coordinate of that\n  // keypoint.\n  const poseVals = new Float32Array(maxNumPeople * NUM_KEYPOINTS * 3).fill(0.0);\n  for (let i = 0; i < posesAboveScore.length; i++) {\n    const poseOffset = i * NUM_KEYPOINTS * 3;\n    const pose = posesAboveScore[i];\n    for (let kp = 0; kp < NUM_KEYPOINTS; kp++) {\n      const keypoint = pose.keypoints[kp];\n      const offset = poseOffset + kp * 3;\n      poseVals[offset] = keypoint.score;\n      poseVals[offset + 1] = keypoint.position.y;\n      poseVals[offset + 2] = keypoint.position.x;\n    }\n  }\n\n  const [scaleX, scaleY] =\n      getScale([height, width], [inHeight, inWidth], padding);\n\n  const posesTensor = tf.tensor(poseVals, [maxNumPeople, NUM_KEYPOINTS, 3]);\n\n  const {top: padT, left: padL} = padding;\n\n  const program: tf.webgl.GPGPUProgram = {\n    variableNames: ['segmentation', 'longOffsets', 'poses'],\n    outputShape: [origHeight, origWidth],\n    userCode: `\n    int convertToPositionInOutput(int pos, int pad, float scale, int stride) {\n      return round(((float(pos + pad) + 1.0) * scale - 1.0) / float(stride));\n    }\n\n    float convertToPositionInOutputFloat(\n        int pos, int pad, float scale, int stride) {\n      return ((float(pos + pad) + 1.0) * scale - 1.0) / float(stride);\n    }\n\n    float dist(float x1, float y1, float x2, float y2) {\n      return pow(x1 - x2, 2.0) + pow(y1 - y2, 2.0);\n    }\n\n    float sampleLongOffsets(float h, float w, int d, int k) {\n      float fh = fract(h);\n      float fw = fract(w);\n      int clH = int(ceil(h));\n      int clW = int(ceil(w));\n      int flH = int(floor(h));\n      int flW = int(floor(w));\n      float o11 = getLongOffsets(flH, flW, d, k);\n      float o12 = getLongOffsets(flH, clW, d, k);\n      float o21 = getLongOffsets(clH, flW, d, k);\n      float o22 = getLongOffsets(clH, clW, d, k);\n      float o1 = mix(o11, o12, fw);\n      float o2 = mix(o21, o22, fw);\n      return mix(o1, o2, fh);\n    }\n\n    int findNearestPose(int h, int w) {\n      float prob = getSegmentation(h, w);\n      if (prob < 1.0) {\n        return -1;\n      }\n\n      // Done(Tyler): convert from output space h/w to strided space.\n      float stridedH = convertToPositionInOutputFloat(\n        h, ${padT}, ${scaleY}, ${stride});\n      float stridedW = convertToPositionInOutputFloat(\n        w, ${padL}, ${scaleX}, ${stride});\n\n      float minDist = 1000000.0;\n      int iMin = -1;\n      for (int i = 0; i < ${maxNumPeople}; i++) {\n        float curDistSum = 0.0;\n        int numKpt = 0;\n        for (int k = 0; k < ${NUM_KEYPOINTS}; k++) {\n          float dy = sampleLongOffsets(stridedH, stridedW, 0, k);\n          float dx = sampleLongOffsets(stridedH, stridedW, 1, k);\n\n          float y = float(h) + dy;\n          float x = float(w) + dx;\n\n          for (int s = 0; s < ${refineSteps}; s++) {\n            int yRounded = round(min(y, float(${height - 1.0})));\n            int xRounded = round(min(x, float(${width - 1.0})));\n\n            float yStrided = convertToPositionInOutputFloat(\n              yRounded, ${padT}, ${scaleY}, ${stride});\n            float xStrided = convertToPositionInOutputFloat(\n              xRounded, ${padL}, ${scaleX}, ${stride});\n\n            float dy = sampleLongOffsets(yStrided, xStrided, 0, k);\n            float dx = sampleLongOffsets(yStrided, xStrided, 1, k);\n\n            y = y + dy;\n            x = x + dx;\n          }\n\n          float poseScore = getPoses(i, k, 0);\n          float poseY = getPoses(i, k, 1);\n          float poseX = getPoses(i, k, 2);\n          if (poseScore > ${minKptScore}) {\n            numKpt = numKpt + 1;\n            curDistSum = curDistSum + dist(x, y, poseX, poseY);\n          }\n        }\n        if (numKpt > 0 && curDistSum / float(numKpt) < minDist) {\n          minDist = curDistSum / float(numKpt);\n          iMin = i;\n        }\n      }\n      return iMin;\n    }\n\n    void main() {\n        ivec2 coords = getOutputCoords();\n        int nearestPose = findNearestPose(coords[0], coords[1]);\n        setOutput(float(nearestPose));\n      }\n  `\n  };\n  const webglBackend = tf.backend() as tf.webgl.MathBackendWebGL;\n  return webglBackend.compileAndRun(\n      program, [segmentation, shapedLongOffsets, posesTensor]);\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\nimport {getBackend} from '@tensorflow/tfjs-core';\n\nimport {Padding, PartSegmentation, PersonSegmentation, Pose} from '../types';\n\nimport {decodeMultipleMasksCPU, decodeMultiplePartMasksCPU} from './decode_multiple_masks_cpu';\nimport {decodeMultipleMasksWebGl} from './decode_multiple_masks_webgl';\n\nexport function toPersonKSegmentation(\n    segmentation: tf.Tensor2D, k: number): tf.Tensor2D {\n  return tf.tidy(\n      () => (segmentation.equal(tf.scalar(k)).toInt() as tf.Tensor2D));\n}\n\nexport function toPersonKPartSegmentation(\n    segmentation: tf.Tensor2D, bodyParts: tf.Tensor2D, k: number): tf.Tensor2D {\n  return tf.tidy(\n      () => segmentation.equal(tf.scalar(k))\n                .toInt()\n                .mul(bodyParts.add(1))\n                .sub(1));\n}\n\nfunction isWebGlBackend() {\n  return getBackend() === 'webgl';\n}\n\nexport async function decodePersonInstanceMasks(\n    segmentation: tf.Tensor2D, longOffsets: tf.Tensor3D, poses: Pose[],\n    height: number, width: number, stride: number,\n    [inHeight, inWidth]: [number, number], padding: Padding, minPoseScore = 0.2,\n    refineSteps = 8, minKeypointScore = 0.3,\n    maxNumPeople = 10): Promise<PersonSegmentation[]> {\n  // Filter out poses with smaller score.\n  const posesAboveScore = poses.filter(pose => pose.score >= minPoseScore);\n\n  let personSegmentationsData: Uint8Array[];\n\n  if (isWebGlBackend()) {\n    const personSegmentations = tf.tidy(() => {\n      const masksTensor = decodeMultipleMasksWebGl(\n          segmentation, longOffsets, posesAboveScore, height, width, stride,\n          [inHeight, inWidth], padding, refineSteps, minKeypointScore,\n          maxNumPeople);\n\n      return posesAboveScore.map(\n          (_, k) => toPersonKSegmentation(masksTensor, k));\n    });\n\n    personSegmentationsData =\n        (await Promise.all(personSegmentations.map(mask => mask.data())) as\n         Uint8Array[]);\n\n    personSegmentations.forEach(x => x.dispose());\n  } else {\n    const segmentationsData = await segmentation.data() as Uint8Array;\n    const longOffsetsData = await longOffsets.data() as Float32Array;\n\n    personSegmentationsData = decodeMultipleMasksCPU(\n        segmentationsData, longOffsetsData, posesAboveScore, height, width,\n        stride, [inHeight, inWidth], padding, refineSteps);\n  }\n\n  return personSegmentationsData.map(\n      (data, i) => ({data, pose: posesAboveScore[i], width, height}));\n}\n\nexport async function decodePersonInstancePartMasks(\n    segmentation: tf.Tensor2D, longOffsets: tf.Tensor3D,\n    partSegmentation: tf.Tensor2D, poses: Pose[], height: number, width: number,\n    stride: number, [inHeight, inWidth]: [number, number], padding: Padding,\n    minPoseScore = 0.2, refineSteps = 8, minKeypointScore = 0.3,\n    maxNumPeople = 10): Promise<PartSegmentation[]> {\n  const posesAboveScore = poses.filter(pose => pose.score >= minPoseScore);\n\n  let partSegmentationsByPersonData: Int32Array[];\n\n  if (isWebGlBackend()) {\n    const partSegmentations = tf.tidy(() => {\n      const masksTensor = decodeMultipleMasksWebGl(\n          segmentation, longOffsets, posesAboveScore, height, width, stride,\n          [inHeight, inWidth], padding, refineSteps, minKeypointScore,\n          maxNumPeople);\n\n      return posesAboveScore.map(\n          (_, k) =>\n              toPersonKPartSegmentation(masksTensor, partSegmentation, k));\n    });\n\n    partSegmentationsByPersonData =\n        (await Promise.all(partSegmentations.map(x => x.data()))) as\n        Int32Array[];\n\n    partSegmentations.forEach(x => x.dispose());\n  } else {\n    const segmentationsData = await segmentation.data() as Uint8Array;\n    const longOffsetsData = await longOffsets.data() as Float32Array;\n    const partSegmentaionData = await partSegmentation.data() as Uint8Array;\n\n    partSegmentationsByPersonData = decodeMultiplePartMasksCPU(\n        segmentationsData, longOffsetsData, partSegmentaionData,\n        posesAboveScore, height, width, stride, [inHeight, inWidth], padding,\n        refineSteps);\n  }\n\n  return partSegmentationsByPersonData.map(\n      (data, k) => ({pose: posesAboveScore[k], data, height, width}));\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// algorithm based on Coursera Lecture from Algorithms, Part 1:\n// https://www.coursera.org/learn/algorithms-part1/lecture/ZjoSM/heapsort\n\nfunction half(k: number) {\n  return Math.floor(k / 2);\n}\n\nexport class MaxHeap<T> {\n  private priorityQueue: T[];\n  private numberOfElements: number;\n  private getElementValue: (element: T) => number;\n\n  constructor(maxSize: number, getElementValue: (element: T) => number) {\n    this.priorityQueue = new Array(maxSize);\n    this.numberOfElements = -1;\n    this.getElementValue = getElementValue;\n  }\n\n  public enqueue(x: T): void {\n    this.priorityQueue[++this.numberOfElements] = x;\n    this.swim(this.numberOfElements);\n  }\n\n  public dequeue(): T {\n    const max = this.priorityQueue[0];\n    this.exchange(0, this.numberOfElements--);\n    this.sink(0);\n    this.priorityQueue[this.numberOfElements + 1] = null;\n    return max;\n  }\n\n  public empty(): boolean {\n    return this.numberOfElements === -1;\n  }\n\n  public size(): number {\n    return this.numberOfElements + 1;\n  }\n\n  public all(): T[] {\n    return this.priorityQueue.slice(0, this.numberOfElements + 1);\n  }\n\n  public max(): T {\n    return this.priorityQueue[0];\n  }\n\n  private swim(k: number): void {\n    while (k > 0 && this.less(half(k), k)) {\n      this.exchange(k, half(k));\n      k = half(k);\n    }\n  }\n\n  private sink(k: number): void {\n    while (2 * k <= this.numberOfElements) {\n      let j = 2 * k;\n      if (j < this.numberOfElements && this.less(j, j + 1)) {\n        j++;\n      }\n      if (!this.less(k, j)) {\n        break;\n      }\n      this.exchange(k, j);\n      k = j;\n    }\n  }\n\n  private getValueAt(i: number): number {\n    return this.getElementValue(this.priorityQueue[i]);\n  }\n\n  private less(i: number, j: number): boolean {\n    return this.getValueAt(i) < this.getValueAt(j);\n  }\n\n  private exchange(i: number, j: number): void {\n    const t = this.priorityQueue[i];\n    this.priorityQueue[i] = this.priorityQueue[j];\n    this.priorityQueue[j] = t;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {PartWithScore, TensorBuffer3D} from '../types';\n\nimport {MaxHeap} from './max_heap';\n\nfunction scoreIsMaximumInLocalWindow(\n    keypointId: number, score: number, heatmapY: number, heatmapX: number,\n    localMaximumRadius: number, scores: TensorBuffer3D): boolean {\n  const [height, width] = scores.shape;\n\n  let localMaximum = true;\n  const yStart = Math.max(heatmapY - localMaximumRadius, 0);\n  const yEnd = Math.min(heatmapY + localMaximumRadius + 1, height);\n  for (let yCurrent = yStart; yCurrent < yEnd; ++yCurrent) {\n    const xStart = Math.max(heatmapX - localMaximumRadius, 0);\n    const xEnd = Math.min(heatmapX + localMaximumRadius + 1, width);\n    for (let xCurrent = xStart; xCurrent < xEnd; ++xCurrent) {\n      if (scores.get(yCurrent, xCurrent, keypointId) > score) {\n        localMaximum = false;\n        break;\n      }\n    }\n    if (!localMaximum) {\n      break;\n    }\n  }\n\n  return localMaximum;\n}\n\n/**\n * Builds a priority queue with part candidate positions for a specific image in\n * the batch. For this we find all local maxima in the score maps with score\n * values above a threshold. We create a single priority queue across all parts.\n */\nexport function buildPartWithScoreQueue(\n    scoreThreshold: number, localMaximumRadius: number,\n    scores: TensorBuffer3D): MaxHeap<PartWithScore> {\n  const [height, width, numKeypoints] = scores.shape;\n\n  const queue = new MaxHeap<PartWithScore>(\n      height * width * numKeypoints, ({score}) => score);\n\n  for (let heatmapY = 0; heatmapY < height; ++heatmapY) {\n    for (let heatmapX = 0; heatmapX < width; ++heatmapX) {\n      for (let keypointId = 0; keypointId < numKeypoints; ++keypointId) {\n        const score = scores.get(heatmapY, heatmapX, keypointId);\n\n        // Only consider parts with score greater or equal to threshold as\n        // root candidates.\n        if (score < scoreThreshold) {\n          continue;\n        }\n\n        // Only consider keypoints whose score is maximum in a local window.\n        if (scoreIsMaximumInLocalWindow(\n                keypointId, score, heatmapY, heatmapX, localMaximumRadius,\n                scores)) {\n          queue.enqueue({score, part: {heatmapY, heatmapX, id: keypointId}});\n        }\n      }\n    }\n  }\n\n  return queue;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NumberTuple, PART_IDS, PART_NAMES, POSE_CHAIN} from '../keypoints';\nimport {Keypoint, PartWithScore, TensorBuffer3D, Vector2D} from '../types';\n\nimport {clamp, getOffsetPoint} from './util';\nimport {addVectors, getImageCoords} from './util';\n\nconst parentChildrenTuples: NumberTuple[] = POSE_CHAIN.map(\n    ([parentJoinName, childJoinName]): NumberTuple =>\n        ([PART_IDS[parentJoinName], PART_IDS[childJoinName]]));\n\nconst parentToChildEdges: number[] =\n    parentChildrenTuples.map(([, childJointId]) => childJointId);\n\nconst childToParentEdges: number[] =\n    parentChildrenTuples.map(([\n                               parentJointId,\n                             ]) => parentJointId);\n\nfunction getDisplacement(\n    edgeId: number, point: Vector2D, displacements: TensorBuffer3D): Vector2D {\n  const numEdges = displacements.shape[2] / 2;\n  return {\n    y: displacements.get(point.y, point.x, edgeId),\n    x: displacements.get(point.y, point.x, numEdges + edgeId)\n  };\n}\n\nfunction getStridedIndexNearPoint(\n    point: Vector2D, outputStride: number, height: number,\n    width: number): Vector2D {\n  return {\n    y: clamp(Math.round(point.y / outputStride), 0, height - 1),\n    x: clamp(Math.round(point.x / outputStride), 0, width - 1)\n  };\n}\n\n/**\n * We get a new keypoint along the `edgeId` for the pose instance, assuming\n * that the position of the `idSource` part is already known. For this, we\n * follow the displacement vector from the source to target part (stored in\n * the `i`-t channel of the displacement tensor). The displaced keypoint\n * vector is refined using the offset vector by `offsetRefineStep` times.\n */\nfunction traverseToTargetKeypoint(\n    edgeId: number, sourceKeypoint: Keypoint, targetKeypointId: number,\n    scoresBuffer: TensorBuffer3D, offsets: TensorBuffer3D, outputStride: number,\n    displacements: TensorBuffer3D, offsetRefineStep = 2): Keypoint {\n  const [height, width] = scoresBuffer.shape;\n\n  // Nearest neighbor interpolation for the source->target displacements.\n  const sourceKeypointIndices = getStridedIndexNearPoint(\n      sourceKeypoint.position, outputStride, height, width);\n\n  const displacement =\n      getDisplacement(edgeId, sourceKeypointIndices, displacements);\n\n  const displacedPoint = addVectors(sourceKeypoint.position, displacement);\n  let targetKeypoint = displacedPoint;\n  for (let i = 0; i < offsetRefineStep; i++) {\n    const targetKeypointIndices =\n        getStridedIndexNearPoint(targetKeypoint, outputStride, height, width);\n\n    const offsetPoint = getOffsetPoint(\n        targetKeypointIndices.y, targetKeypointIndices.x, targetKeypointId,\n        offsets);\n\n    targetKeypoint = addVectors(\n        {\n          x: targetKeypointIndices.x * outputStride,\n          y: targetKeypointIndices.y * outputStride\n        },\n        {x: offsetPoint.x, y: offsetPoint.y});\n  }\n  const targetKeyPointIndices =\n      getStridedIndexNearPoint(targetKeypoint, outputStride, height, width);\n  const score = scoresBuffer.get(\n      targetKeyPointIndices.y, targetKeyPointIndices.x, targetKeypointId);\n\n  return {position: targetKeypoint, part: PART_NAMES[targetKeypointId], score};\n}\n\n/**\n * Follows the displacement fields to decode the full pose of the object\n * instance given the position of a part that acts as root.\n *\n * @return An array of decoded keypoints and their scores for a single pose\n */\nexport function decodePose(\n    root: PartWithScore, scores: TensorBuffer3D, offsets: TensorBuffer3D,\n    outputStride: number, displacementsFwd: TensorBuffer3D,\n    displacementsBwd: TensorBuffer3D): Keypoint[] {\n  const numParts = scores.shape[2];\n  const numEdges = parentToChildEdges.length;\n\n  const instanceKeypoints: Keypoint[] = new Array(numParts);\n  // Start a new detection instance at the position of the root.\n  const {part: rootPart, score: rootScore} = root;\n  const rootPoint = getImageCoords(rootPart, outputStride, offsets);\n\n  instanceKeypoints[rootPart.id] = {\n    score: rootScore,\n    part: PART_NAMES[rootPart.id],\n    position: rootPoint\n  };\n\n  // Decode the part positions upwards in the tree, following the backward\n  // displacements.\n  for (let edge = numEdges - 1; edge >= 0; --edge) {\n    const sourceKeypointId = parentToChildEdges[edge];\n    const targetKeypointId = childToParentEdges[edge];\n    if (instanceKeypoints[sourceKeypointId] &&\n        !instanceKeypoints[targetKeypointId]) {\n      instanceKeypoints[targetKeypointId] = traverseToTargetKeypoint(\n          edge, instanceKeypoints[sourceKeypointId], targetKeypointId, scores,\n          offsets, outputStride, displacementsBwd);\n    }\n  }\n\n  // Decode the part positions downwards in the tree, following the forward\n  // displacements.\n  for (let edge = 0; edge < numEdges; ++edge) {\n    const sourceKeypointId = childToParentEdges[edge];\n    const targetKeypointId = parentToChildEdges[edge];\n    if (instanceKeypoints[sourceKeypointId] &&\n        !instanceKeypoints[targetKeypointId]) {\n      instanceKeypoints[targetKeypointId] = traverseToTargetKeypoint(\n          edge, instanceKeypoints[sourceKeypointId], targetKeypointId, scores,\n          offsets, outputStride, displacementsFwd);\n    }\n  }\n\n  return instanceKeypoints;\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Keypoint, Pose, TensorBuffer3D} from '../types';\n\nimport {buildPartWithScoreQueue} from './build_part_with_score_queue';\nimport {decodePose} from './decode_pose';\nimport {getImageCoords, squaredDistance} from './util';\n\nfunction withinNmsRadiusOfCorrespondingPoint(\n    poses: Pose[], squaredNmsRadius: number, {x, y}: {x: number, y: number},\n    keypointId: number): boolean {\n  return poses.some(({keypoints}) => {\n    const correspondingKeypoint = keypoints[keypointId].position;\n    return squaredDistance(\n               y, x, correspondingKeypoint.y, correspondingKeypoint.x) <=\n        squaredNmsRadius;\n  });\n}\n\n/* Score the newly proposed object instance without taking into account\n * the scores of the parts that overlap with any previously detected\n * instance.\n */\nfunction getInstanceScore(\n    existingPoses: Pose[], squaredNmsRadius: number,\n    instanceKeypoints: Keypoint[]): number {\n  let notOverlappedKeypointScores = instanceKeypoints.reduce(\n      (result, {position, score}, keypointId): number => {\n        if (!withinNmsRadiusOfCorrespondingPoint(\n                existingPoses, squaredNmsRadius, position, keypointId)) {\n          result += score;\n        }\n        return result;\n      }, 0.0);\n\n  return notOverlappedKeypointScores /= instanceKeypoints.length;\n}\n\n// A point (y, x) is considered as root part candidate if its score is a\n// maximum in a window |y - y'| <= kLocalMaximumRadius, |x - x'| <=\n// kLocalMaximumRadius.\nconst kLocalMaximumRadius = 1;\n\n/**\n * Detects multiple poses and finds their parts from part scores and\n * displacement vectors. It returns up to `maxDetections` object instance\n * detections in decreasing root score order. It works as follows: We first\n * create a priority queue with local part score maxima above\n * `scoreThreshold`, considering all parts at the same time. Then we\n * iteratively pull the top  element of the queue (in decreasing score order)\n * and treat it as a root candidate for a new object instance. To avoid\n * duplicate detections, we reject the root candidate if it is within a disk\n * of `nmsRadius` pixels from the corresponding part of a previously detected\n * instance, which is a form of part-based non-maximum suppression (NMS). If\n * the root candidate passes the NMS check, we start a new object instance\n * detection, treating the corresponding part as root and finding the\n * positions of the remaining parts by following the displacement vectors\n * along the tree-structured part graph. We assign to the newly detected\n * instance a score equal to the sum of scores of its parts which have not\n * been claimed by a previous instance (i.e., those at least `nmsRadius`\n * pixels away from the corresponding part of all previously detected\n * instances), divided by the total number of parts `numParts`.\n *\n * @param heatmapScores 3-D tensor with shape `[height, width, numParts]`.\n * The value of heatmapScores[y, x, k]` is the score of placing the `k`-th\n * object part at position `(y, x)`.\n *\n * @param offsets 3-D tensor with shape `[height, width, numParts * 2]`.\n * The value of [offsets[y, x, k], offsets[y, x, k + numParts]]` is the\n * short range offset vector of the `k`-th  object part at heatmap\n * position `(y, x)`.\n *\n * @param displacementsFwd 3-D tensor of shape\n * `[height, width, 2 * num_edges]`, where `num_edges = num_parts - 1` is the\n * number of edges (parent-child pairs) in the tree. It contains the forward\n * displacements between consecutive part from the root towards the leaves.\n *\n * @param displacementsBwd 3-D tensor of shape\n * `[height, width, 2 * num_edges]`, where `num_edges = num_parts - 1` is the\n * number of edges (parent-child pairs) in the tree. It contains the backward\n * displacements between consecutive part from the root towards the leaves.\n *\n * @param outputStride The output stride that was used when feed-forwarding\n * through the PoseNet model.  Must be 32, 16, or 8.\n *\n * @param maxPoseDetections Maximum number of returned instance detections per\n * image.\n *\n * @param scoreThreshold Only return instance detections that have root part\n * score greater or equal to this value. Defaults to 0.5.\n *\n * @param nmsRadius Non-maximum suppression part distance. It needs to be\n * strictly positive. Two parts suppress each other if they are less than\n * `nmsRadius` pixels away. Defaults to 20.\n *\n * @return An array of poses and their scores, each containing keypoints and\n * the corresponding keypoint scores.\n */\nexport function decodeMultiplePoses(\n    scoresBuffer: TensorBuffer3D, offsetsBuffer: TensorBuffer3D,\n    displacementsFwdBuffer: TensorBuffer3D,\n    displacementsBwdBuffer: TensorBuffer3D, outputStride: number,\n    maxPoseDetections: number, scoreThreshold = 0.5, nmsRadius = 20): Pose[] {\n  const poses: Pose[] = [];\n\n  const queue = buildPartWithScoreQueue(\n      scoreThreshold, kLocalMaximumRadius, scoresBuffer);\n\n  const squaredNmsRadius = nmsRadius * nmsRadius;\n\n  // Generate at most maxDetections object instances per image in\n  // decreasing root part score order.\n  while (poses.length < maxPoseDetections && !queue.empty()) {\n    // The top element in the queue is the next root candidate.\n    const root = queue.dequeue();\n\n    // Part-based non-maximum suppression: We reject a root candidate if it\n    // is within a disk of `nmsRadius` pixels from the corresponding part of\n    // a previously detected instance.\n    const rootImageCoords =\n        getImageCoords(root.part, outputStride, offsetsBuffer);\n    if (withinNmsRadiusOfCorrespondingPoint(\n            poses, squaredNmsRadius, rootImageCoords, root.part.id)) {\n      continue;\n    }\n\n    // Start a new detection instance at the position of the root.\n    const keypoints = decodePose(\n        root, scoresBuffer, offsetsBuffer, outputStride, displacementsFwdBuffer,\n        displacementsBwdBuffer);\n\n    const score = getInstanceScore(poses, squaredNmsRadius, keypoints);\n\n    poses.push({keypoints, score});\n  }\n\n  return poses;\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\n\nimport {BaseModel} from './base_model';\n\nconst imageNetMean = [-123.15, -115.90, -103.06];\n\nexport class ResNet extends BaseModel {\n  preprocessInput(input: tf.Tensor3D): tf.Tensor3D {\n    return input.add(imageNetMean);\n  }\n\n  nameOutputResults(results: tf.Tensor3D[]) {\n    const [\n      displacementBwd,\n      displacementFwd,\n      heatmap,\n      longOffsets,\n      offsets,\n      partHeatmaps,\n      segmentation,\n      partOffsets,\n  ] = results;\n    return {\n      offsets,\n      segmentation,\n      partHeatmaps,\n      longOffsets,\n      heatmap,\n      displacementFwd,\n      displacementBwd,\n      partOffsets\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nconst RESNET50_BASE_URL =\n    'https://storage.googleapis.com/tfjs-models/savedmodel/bodypix/resnet50/';\nconst MOBILENET_BASE_URL =\n    'https://storage.googleapis.com/tfjs-models/savedmodel/bodypix/mobilenet/';\n\n// The BodyPix 2.0 ResNet50 models use the latest TensorFlow.js 1.0 model\n// format.\nexport function resNet50SavedModel(stride: number, quantBytes: number): string {\n  const graphJson = `model-stride${stride}.json`;\n  // quantBytes=4 corresponding to the non-quantized full-precision SavedModel.\n  if (quantBytes === 4) {\n    return RESNET50_BASE_URL + `float/` + graphJson;\n  } else {\n    return RESNET50_BASE_URL + `quant${quantBytes}/` + graphJson;\n  }\n}\n\n// The BodyPix 2.0 MobileNetV1 models use the latest TensorFlow.js 1.0 model\n// format.\nexport function mobileNetSavedModel(\n    stride: number, multiplier: number, quantBytes: number): string {\n  const toStr: {[key: number]: string} = {1.0: '100', 0.75: '075', 0.50: '050'};\n  const graphJson = `model-stride${stride}.json`;\n  // quantBytes=4 corresponding to the non-quantized full-precision SavedModel.\n  if (quantBytes === 4) {\n    return MOBILENET_BASE_URL + `float/${toStr[multiplier]}/` + graphJson;\n  } else {\n    return MOBILENET_BASE_URL + `quant${quantBytes}/${toStr[multiplier]}/` +\n        graphJson;\n  }\n}\n","import * as tf from '@tensorflow/tfjs-core';\n\nimport {BodyPixInput, BodyPixOutputStride, Padding} from './types';\nimport {Pose, TensorBuffer3D} from './types';\nimport {BodyPixInternalResolution} from './types';\n\nfunction getSizeFromImageLikeElement(input: HTMLImageElement|\n                                     HTMLCanvasElement): [number, number] {\n  if (input.offsetHeight !== 0 && input.offsetWidth !== 0) {\n    return [input.offsetHeight, input.offsetWidth];\n  } else if (input.height != null && input.width != null) {\n    return [input.height, input.width];\n  } else {\n    throw new Error(\n        `HTMLImageElement must have height and width attributes set.`);\n  }\n}\n\nfunction getSizeFromVideoElement(input: HTMLVideoElement): [number, number] {\n  if (input.height != null && input.width != null) {\n    // Prioritizes user specified height and width.\n    return [input.height, input.width];\n  } else {\n    return [input.videoHeight, input.videoWidth];\n  }\n}\n\nexport function getInputSize(input: BodyPixInput): [number, number] {\n  if ((typeof (HTMLCanvasElement) !== 'undefined' &&\n       input instanceof HTMLCanvasElement) ||\n      (typeof (HTMLImageElement) !== 'undefined' &&\n       input instanceof HTMLImageElement)) {\n    return getSizeFromImageLikeElement(input);\n  } else if (typeof (ImageData) !== 'undefined' && input instanceof ImageData) {\n    return [input.height, input.width];\n  } else if (\n      typeof (HTMLVideoElement) !== 'undefined' &&\n      input instanceof HTMLVideoElement) {\n    return getSizeFromVideoElement(input);\n  } else if (input instanceof tf.Tensor) {\n    return [input.shape[0], input.shape[1]];\n  } else {\n    throw new Error(`error: Unknown input type: ${input}.`);\n  }\n}\n\nfunction isValidInputResolution(\n    resolution: number, outputStride: number): boolean {\n  return (resolution - 1) % outputStride === 0;\n}\n\nexport function toValidInputResolution(\n    inputResolution: number, outputStride: BodyPixOutputStride): number {\n  if (isValidInputResolution(inputResolution, outputStride)) {\n    return inputResolution;\n  }\n\n  return Math.floor(inputResolution / outputStride) * outputStride + 1;\n}\n\nconst INTERNAL_RESOLUTION_STRING_OPTIONS = {\n  low: 'low',\n  medium: 'medium',\n  high: 'high',\n  full: 'full'\n};\n\nconst INTERNAL_RESOLUTION_PERCENTAGES = {\n  [INTERNAL_RESOLUTION_STRING_OPTIONS.low]: 0.25,\n  [INTERNAL_RESOLUTION_STRING_OPTIONS.medium]: 0.5,\n  [INTERNAL_RESOLUTION_STRING_OPTIONS.high]: 0.75,\n  [INTERNAL_RESOLUTION_STRING_OPTIONS.full]: 1.0\n};\n\nconst MIN_INTERNAL_RESOLUTION = 0.1;\nconst MAX_INTERNAL_RESOLUTION = 2.0;\n\nfunction toInternalResolutionPercentage(\n    internalResolution: BodyPixInternalResolution): number {\n  if (typeof internalResolution === 'string') {\n    const result = INTERNAL_RESOLUTION_PERCENTAGES[internalResolution];\n\n    tf.util.assert(\n        typeof result === 'number',\n        () => `string value of inputResolution must be one of ${\n            Object.values(INTERNAL_RESOLUTION_STRING_OPTIONS)\n                .join(',')} but was ${internalResolution}.`);\n    return result;\n  } else {\n    tf.util.assert(\n        typeof internalResolution === 'number' &&\n            internalResolution <= MAX_INTERNAL_RESOLUTION &&\n            internalResolution >= MIN_INTERNAL_RESOLUTION,\n        () =>\n            `inputResolution must be a string or number between ${\n                MIN_INTERNAL_RESOLUTION} and ${MAX_INTERNAL_RESOLUTION}, but ` +\n            `was ${internalResolution}`);\n\n    return internalResolution;\n  }\n}\n\nexport function toInputResolutionHeightAndWidth(\n    internalResolution: BodyPixInternalResolution,\n    outputStride: BodyPixOutputStride,\n    [inputHeight, inputWidth]: [number, number]): [number, number] {\n  const internalResolutionPercentage =\n      toInternalResolutionPercentage(internalResolution);\n\n  return [\n    toValidInputResolution(\n        inputHeight * internalResolutionPercentage, outputStride),\n    toValidInputResolution(\n        inputWidth * internalResolutionPercentage, outputStride)\n  ];\n}\n\nexport function toInputTensor(input: BodyPixInput) {\n  return input instanceof tf.Tensor ? input : tf.browser.fromPixels(input);\n}\n\nexport function resizeAndPadTo(\n    imageTensor: tf.Tensor3D, [targetH, targetW]: [number, number],\n    flipHorizontal = false): {\n  resizedAndPadded: tf.Tensor3D,\n  paddedBy: [[number, number], [number, number]]\n} {\n  const [height, width] = imageTensor.shape;\n\n  const targetAspect = targetW / targetH;\n  const aspect = width / height;\n\n  let resizeW: number;\n  let resizeH: number;\n  let padL: number;\n  let padR: number;\n  let padT: number;\n  let padB: number;\n\n  if (aspect > targetAspect) {\n    // resize to have the larger dimension match the shape.\n    resizeW = targetW;\n    resizeH = Math.ceil(resizeW / aspect);\n\n    const padHeight = targetH - resizeH;\n    padL = 0;\n    padR = 0;\n    padT = Math.floor(padHeight / 2);\n    padB = targetH - (resizeH + padT);\n  } else {\n    resizeH = targetH;\n    resizeW = Math.ceil(targetH * aspect);\n\n    const padWidth = targetW - resizeW;\n    padL = Math.floor(padWidth / 2);\n    padR = targetW - (resizeW + padL);\n    padT = 0;\n    padB = 0;\n  }\n\n  const resizedAndPadded = tf.tidy(() => {\n    // resize to have largest dimension match image\n    let resized: tf.Tensor3D;\n    if (flipHorizontal) {\n      resized = imageTensor.reverse(1).resizeBilinear([resizeH, resizeW]);\n    } else {\n      resized = imageTensor.resizeBilinear([resizeH, resizeW]);\n    }\n\n    const padded = tf.pad3d(resized, [[padT, padB], [padL, padR], [0, 0]]);\n\n    return padded;\n  });\n\n  return {resizedAndPadded, paddedBy: [[padT, padB], [padL, padR]]};\n}\n\nexport function scaleAndCropToInputTensorShape(\n    tensor: tf.Tensor3D,\n    [inputTensorHeight, inputTensorWidth]: [number, number],\n    [resizedAndPaddedHeight, resizedAndPaddedWidth]: [number, number],\n    [[padT, padB], [padL, padR]]: [[number, number], [number, number]],\n    applySigmoidActivation = false): tf.Tensor3D {\n  return tf.tidy(() => {\n    let inResizedAndPadded = tensor.resizeBilinear(\n        [resizedAndPaddedHeight, resizedAndPaddedWidth], true);\n\n    if (applySigmoidActivation) {\n      inResizedAndPadded = inResizedAndPadded.sigmoid();\n    }\n\n    return removePaddingAndResizeBack(\n        inResizedAndPadded, [inputTensorHeight, inputTensorWidth],\n        [[padT, padB], [padL, padR]]);\n  });\n}\n\nexport function removePaddingAndResizeBack(\n    resizedAndPadded: tf.Tensor3D,\n    [originalHeight, originalWidth]: [number, number],\n    [[padT, padB], [padL, padR]]: [[number, number], [number, number]]):\n    tf.Tensor3D {\n  return tf.tidy(() => {\n    return tf.image\n        .cropAndResize(\n            resizedAndPadded.expandDims(), [[\n              padT / (originalHeight + padT + padB - 1.0),\n              padL / (originalWidth + padL + padR - 1.0),\n              (padT + originalHeight - 1.0) /\n                  (originalHeight + padT + padB - 1.0),\n              (padL + originalWidth - 1.0) / (originalWidth + padL + padR - 1.0)\n            ]],\n            [0], [originalHeight, originalWidth])\n        .squeeze([0]);\n  });\n}\n\nexport function resize2d(\n    tensor: tf.Tensor2D, resolution: [number, number],\n    nearestNeighbor?: boolean): tf.Tensor2D {\n  return tf.tidy(() => {\n    return tensor.expandDims<tf.Rank.R3>(2)\n        .resizeBilinear(resolution, nearestNeighbor)\n        .squeeze();\n  });\n}\n\nexport function padAndResizeTo(\n    input: BodyPixInput, [targetH, targetW]: [number, number]):\n    {resized: tf.Tensor3D, padding: Padding} {\n  const [height, width] = getInputSize(input);\n  const targetAspect = targetW / targetH;\n  const aspect = width / height;\n  let [padT, padB, padL, padR] = [0, 0, 0, 0];\n  if (aspect < targetAspect) {\n    // pads the width\n    padT = 0;\n    padB = 0;\n    padL = Math.round(0.5 * (targetAspect * height - width));\n    padR = Math.round(0.5 * (targetAspect * height - width));\n  } else {\n    // pads the height\n    padT = Math.round(0.5 * ((1.0 / targetAspect) * width - height));\n    padB = Math.round(0.5 * ((1.0 / targetAspect) * width - height));\n    padL = 0;\n    padR = 0;\n  }\n\n  const resized: tf.Tensor3D = tf.tidy(() => {\n    let imageTensor = toInputTensor(input);\n    imageTensor = tf.pad3d(imageTensor, [[padT, padB], [padL, padR], [0, 0]]);\n\n    return imageTensor.resizeBilinear([targetH, targetW]);\n  });\n\n  return {resized, padding: {top: padT, left: padL, right: padR, bottom: padB}};\n}\n\nexport async function toTensorBuffers3D(tensors: tf.Tensor3D[]):\n    Promise<TensorBuffer3D[]> {\n  return Promise.all(tensors.map(tensor => tensor.buffer()));\n}\n\nexport function scalePose(\n    pose: Pose, scaleY: number, scaleX: number, offsetY = 0,\n    offsetX = 0): Pose {\n  return {\n    score: pose.score,\n    keypoints: pose.keypoints.map(({score, part, position}) => ({\n                                    score,\n                                    part,\n                                    position: {\n                                      x: position.x * scaleX + offsetX,\n                                      y: position.y * scaleY + offsetY\n                                    }\n                                  }))\n  };\n}\n\nexport function scalePoses(\n    poses: Pose[], scaleY: number, scaleX: number, offsetY = 0, offsetX = 0) {\n  if (scaleX === 1 && scaleY === 1 && offsetY === 0 && offsetX === 0) {\n    return poses;\n  }\n  return poses.map(pose => scalePose(pose, scaleY, scaleX, offsetY, offsetX));\n}\n\nexport function flipPoseHorizontal(pose: Pose, imageWidth: number): Pose {\n  return {\n    score: pose.score,\n    keypoints: pose.keypoints.map(\n        ({score, part, position}) => ({\n          score,\n          part,\n          position: {x: imageWidth - 1 - position.x, y: position.y}\n        }))\n  };\n}\n\nexport function flipPosesHorizontal(poses: Pose[], imageWidth: number) {\n  if (imageWidth <= 0) {\n    return poses;\n  }\n  return poses.map(pose => flipPoseHorizontal(pose, imageWidth));\n}\n\nexport function scaleAndFlipPoses(\n    poses: Pose[], [height, width]: [number, number],\n    [inputResolutionHeight, inputResolutionWidth]: [number, number],\n    padding: Padding, flipHorizontal: boolean): Pose[] {\n  const scaleY =\n      (height + padding.top + padding.bottom) / (inputResolutionHeight);\n  const scaleX =\n      (width + padding.left + padding.right) / (inputResolutionWidth);\n\n  const scaledPoses =\n      scalePoses(poses, scaleY, scaleX, -padding.top, -padding.left);\n\n  if (flipHorizontal) {\n    return flipPosesHorizontal(scaledPoses, width);\n  } else {\n    return scaledPoses;\n  }\n}\n","\n/**\n * @license\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfconv from '@tensorflow/tfjs-converter';\nimport * as tf from '@tensorflow/tfjs-core';\n\nimport {BaseModel} from './base_model';\nimport {decodeOnlyPartSegmentation, decodePartSegmentation, toMaskTensor} from './decode_part_map';\nimport {MobileNet} from './mobilenet';\nimport {decodePersonInstanceMasks, decodePersonInstancePartMasks} from './multi_person/decode_instance_masks';\nimport {decodeMultiplePoses} from './multi_person/decode_multiple_poses';\nimport {ResNet} from './resnet';\nimport {mobileNetSavedModel, resNet50SavedModel} from './saved_models';\nimport {BodyPixArchitecture, BodyPixInput, BodyPixInternalResolution, BodyPixMultiplier, BodyPixOutputStride, BodyPixQuantBytes, Padding} from './types';\nimport {PartSegmentation, PersonSegmentation, SemanticPartSegmentation, SemanticPersonSegmentation} from './types';\nimport {getInputSize, padAndResizeTo, scaleAndCropToInputTensorShape, scaleAndFlipPoses, toInputResolutionHeightAndWidth, toTensorBuffers3D} from './util';\n\nconst APPLY_SIGMOID_ACTIVATION = true;\nconst FLIP_POSES_AFTER_SCALING = false;\n\n/**\n * BodyPix model loading is configurable using the following config dictionary.\n *\n * `architecture`: BodyPixArchitecture. It determines which BodyPix architecture\n * to load. The supported architectures are: MobileNetV1 and ResNet50.\n *\n * `outputStride`: Specifies the output stride of the BodyPix model.\n * The smaller the value, the larger the output resolution, and more accurate\n * the model at the cost of speed. Set this to a larger value to increase speed\n * at the cost of accuracy. Stride 32 is supported for ResNet and\n * stride 8,16,32 are supported for various MobileNetV1 models.\n *\n * `multiplier`: An optional number with values: 1.01, 1.0, 0.75, or\n * 0.50. The value is used only by MobileNet architecture. It is the float\n * multiplier for the depth (number of channels) for all convolution ops.\n * The larger the value, the larger the size of the layers, and more accurate\n * the model at the cost of speed. Set this to a smaller value to increase speed\n * at the cost of accuracy.\n *\n * `modelUrl`: An optional string that specifies custom url of the model. This\n * is useful for area/countries that don't have access to the model hosted on\n * GCP.\n *\n * `quantBytes`: An optional number with values: 1, 2, or 4.  This parameter\n * affects weight quantization in the models. The available options are\n * 1 byte, 2 bytes, and 4 bytes. The higher the value, the larger the model size\n * and thus the longer the loading time, the lower the value, the shorter the\n * loading time but lower the accuracy.\n */\nexport interface ModelConfig {\n  architecture: BodyPixArchitecture;\n  outputStride: BodyPixOutputStride;\n  multiplier?: BodyPixMultiplier;\n  modelUrl?: string;\n  quantBytes?: BodyPixQuantBytes;\n}\n\n// The default configuration for loading MobileNetV1 based BodyPix.\n//\n// (And for references, the default configuration for loading ResNet\n// based PoseNet is also included).\n//\n// ```\n// const RESNET_CONFIG = {\n//   architecture: 'ResNet50',\n//   outputStride: 32,\n//   quantBytes: 4,\n// } as ModelConfig;\n// ```\n\nconst MOBILENET_V1_CONFIG = {\n  architecture: 'MobileNetV1',\n  outputStride: 16,\n  quantBytes: 4,\n  multiplier: 0.75,\n} as ModelConfig;\n\nconst VALID_ARCHITECTURE: BodyPixArchitecture[] = ['MobileNetV1', 'ResNet50'];\nconst VALID_STRIDE: {[id: string]: BodyPixOutputStride[]} = {\n  'MobileNetV1': [8, 16, 32],\n  'ResNet50': [32, 16]\n};\nconst VALID_MULTIPLIER: {[id: string]: BodyPixMultiplier[]} = {\n  'MobileNetV1': [0.50, 0.75, 1.0],\n  'ResNet50': [1.0]\n};\nconst VALID_QUANT_BYTES: BodyPixQuantBytes[] = [1, 2, 4];\n\nfunction validateModelConfig(config: ModelConfig): ModelConfig {\n  config = config || MOBILENET_V1_CONFIG;\n\n  if (config.architecture == null) {\n    config.architecture = 'MobileNetV1';\n  }\n  if (VALID_ARCHITECTURE.indexOf(config.architecture) < 0) {\n    throw new Error(\n        `Invalid architecture ${config.architecture}. ` +\n        `Should be one of ${VALID_ARCHITECTURE}`);\n  }\n  if (config.outputStride == null) {\n    config.outputStride = 16;\n  }\n  if (VALID_STRIDE[config.architecture].indexOf(config.outputStride) < 0) {\n    throw new Error(\n        `Invalid outputStride ${config.outputStride}. ` +\n        `Should be one of ${VALID_STRIDE[config.architecture]} ` +\n        `for architecture ${config.architecture}.`);\n  }\n\n  if (config.multiplier == null) {\n    config.multiplier = 1.0;\n  }\n  if (VALID_MULTIPLIER[config.architecture].indexOf(config.multiplier) < 0) {\n    throw new Error(\n        `Invalid multiplier ${config.multiplier}. ` +\n        `Should be one of ${VALID_MULTIPLIER[config.architecture]} ` +\n        `for architecture ${config.architecture}.`);\n  }\n\n  if (config.quantBytes == null) {\n    config.quantBytes = 4;\n  }\n  if (VALID_QUANT_BYTES.indexOf(config.quantBytes) < 0) {\n    throw new Error(\n        `Invalid quantBytes ${config.quantBytes}. ` +\n        `Should be one of ${VALID_QUANT_BYTES} ` +\n        `for architecture ${config.architecture}.`);\n  }\n\n  return config;\n}\n\n/**\n * BodyPix inference is configurable using the following config dictionary.\n *\n * `flipHorizontal`: If the left-right keypoint of poses/part segmentation\n * should be flipped/mirrored horizontally. This should be set to true for\n * videos where the video is by default flipped horizontally (i.e. a webcam),\n * and you want the person & body part segmentation to be returned in the proper\n * orientation.\n *\n * `internalResolution`: Defaults to 'medium'. The internal resolution\n * percentage that the input is resized to before inference. The larger the\n * internalResolution the more accurate the model at the cost of slower\n * prediction times. Available values are 'low', 'medium', 'high', 'full', or a\n * percentage value between 0 and 1. The values 'low', 'medium', 'high', and\n * 'full' map to 0.25, 0.5, 0.75, and 1.0 correspondingly.\n *\n * `segmentationThreshold`: The minimum that segmentation values must\n * have to be considered part of the person. Affects the generation of the\n * segmentation mask. More specifically, it is the threshold used to binarize\n * the intermediate person segmentation probability. The probability of each\n * pixel belongs to a person is in range [0, 1]. If the probability is greater\n * than the `segmentationThreshold`, it will be set to 1 otherwise 0.\n *\n */\nexport interface InferenceConfig {\n  flipHorizontal?: boolean;\n  internalResolution?: BodyPixInternalResolution;\n  segmentationThreshold?: number;\n}\n\n/**\n * Person Inference Config\n *\n * `maxDetections`: Defaults to 10. Maximum number of person pose detections per\n * image.\n *\n * `scoreThreshold`: Defaults to 0.4. Only return person pose that have root\n * part score greater or equal to this value.\n *\n * `nmsRadius`: Defaults to 20. Non-maximum suppression part distance in pixels.\n * It needs to be strictly positive. Two pose keypoints suppress each other if\n * they are less than `nmsRadius` pixels away.\n */\nexport interface PersonInferenceConfig extends InferenceConfig {\n  maxDetections?: number;\n  scoreThreshold?: number;\n  nmsRadius?: number;\n}\n\n/**\n * Multiple Person Instance Inference Config\n *\n * `maxDetections`: Defaults to 10. Maximum number of returned instance\n * segmentation and pose detections per image.\n *\n * `scoreThreshold`: Defaults to 0.4. Only returns and uses person\n * poses for instance segmentation assignment when the pose has root part score\n * greater or equal to this value.\n *\n * `nmsRadius`: Defaults to 20. Non-maximum suppression part distance in pixels.\n * It needs to be strictly positive. Two parts suppress each other if they are\n * less than `nmsRadius` pixels away.\n *\n * `minKeypointScore`: Default to 0.3. Keypoints above the score are used\n * for matching and assigning segmentation mask to each person.\n *\n * `refineSteps`: Default to 10. The number of refinement steps used when\n * assigning the instance segmentation. It needs to be strictly positive. The\n * larger the higher the accuracy and slower the inference.\n *\n */\nexport interface MultiPersonInstanceInferenceConfig extends InferenceConfig {\n  maxDetections?: number;\n  scoreThreshold?: number;\n  nmsRadius?: number;\n  minKeypointScore?: number;\n  refineSteps?: number;\n}\n\nexport const PERSON_INFERENCE_CONFIG: PersonInferenceConfig = {\n  flipHorizontal: false,\n  internalResolution: 'medium',\n  segmentationThreshold: 0.7,\n  maxDetections: 10,\n  scoreThreshold: 0.4,\n  nmsRadius: 20,\n};\n\nexport const MULTI_PERSON_INSTANCE_INFERENCE_CONFIG:\n    MultiPersonInstanceInferenceConfig = {\n      flipHorizontal: false,\n      internalResolution: 'medium',\n      segmentationThreshold: 0.7,\n      maxDetections: 10,\n      scoreThreshold: 0.4,\n      nmsRadius: 20,\n      minKeypointScore: 0.3,\n      refineSteps: 10\n    };\n\nfunction validatePersonInferenceConfig(config: PersonInferenceConfig) {\n  const {segmentationThreshold, maxDetections, scoreThreshold, nmsRadius} =\n      config;\n\n  if (segmentationThreshold < 0.0 || segmentationThreshold > 1.0) {\n    throw new Error(\n        `segmentationThreshold ${segmentationThreshold}. ` +\n        `Should be in range [0.0, 1.0]`);\n  }\n\n  if (maxDetections <= 0) {\n    throw new Error(\n        `Invalid maxDetections ${maxDetections}. ` +\n        `Should be > 0`);\n  }\n\n  if (scoreThreshold < 0.0 || scoreThreshold > 1.0) {\n    throw new Error(\n        `Invalid scoreThreshold ${scoreThreshold}. ` +\n        `Should be in range [0.0, 1.0]`);\n  }\n\n  if (nmsRadius <= 0) {\n    throw new Error(`Invalid nmsRadius ${nmsRadius}.`);\n  }\n}\n\nfunction validateMultiPersonInstanceInferenceConfig(\n    config: MultiPersonInstanceInferenceConfig) {\n  const {\n    segmentationThreshold,\n    maxDetections,\n    scoreThreshold,\n    nmsRadius,\n    minKeypointScore,\n    refineSteps\n  } = config;\n\n  if (segmentationThreshold < 0.0 || segmentationThreshold > 1.0) {\n    throw new Error(\n        `segmentationThreshold ${segmentationThreshold}. ` +\n        `Should be in range [0.0, 1.0]`);\n  }\n\n  if (maxDetections <= 0) {\n    throw new Error(\n        `Invalid maxDetections ${maxDetections}. ` +\n        `Should be > 0`);\n  }\n\n  if (scoreThreshold < 0.0 || scoreThreshold > 1.0) {\n    throw new Error(\n        `Invalid scoreThreshold ${scoreThreshold}. ` +\n        `Should be in range [0.0, 1.0]`);\n  }\n\n  if (nmsRadius <= 0) {\n    throw new Error(`Invalid nmsRadius ${nmsRadius}.`);\n  }\n\n  if (minKeypointScore < 0 || minKeypointScore > 1) {\n    throw new Error(\n        `Invalid minKeypointScore ${minKeypointScore}.` +\n        `Should be in range [0.0, 1.0]`);\n  }\n\n  if (refineSteps <= 0 || refineSteps > 20) {\n    throw new Error(\n        `Invalid refineSteps ${refineSteps}.` +\n        `Should be in range [1, 20]`);\n  }\n}\n\nexport class BodyPix {\n  baseModel: BaseModel;\n\n  constructor(net: BaseModel) {\n    this.baseModel = net;\n  }\n\n  private predictForPersonSegmentation(input: tf.Tensor3D): {\n    segmentLogits: tf.Tensor3D,\n    heatmapScores: tf.Tensor3D,\n    offsets: tf.Tensor3D,\n    displacementFwd: tf.Tensor3D,\n    displacementBwd: tf.Tensor3D,\n  } {\n    const {\n      segmentation,\n      heatmapScores,\n      offsets,\n      displacementFwd,\n      displacementBwd,\n    } = this.baseModel.predict(input);\n    return {\n      segmentLogits: segmentation,\n      heatmapScores,\n      offsets,\n      displacementFwd,\n      displacementBwd,\n    };\n  }\n\n  private predictForPersonSegmentationAndPart(input: tf.Tensor3D): {\n    segmentLogits: tf.Tensor3D,\n    partHeatmapLogits: tf.Tensor3D,\n    heatmapScores: tf.Tensor3D,\n    offsets: tf.Tensor3D,\n    displacementFwd: tf.Tensor3D,\n    displacementBwd: tf.Tensor3D,\n  } {\n    const {\n      segmentation,\n      partHeatmaps,\n      heatmapScores,\n      offsets,\n      displacementFwd,\n      displacementBwd\n    } = this.baseModel.predict(input);\n    return {\n      segmentLogits: segmentation,\n      partHeatmapLogits: partHeatmaps,\n      heatmapScores,\n      offsets,\n      displacementFwd,\n      displacementBwd,\n    };\n  }\n\n  private predictForMultiPersonInstanceSegmentationAndPart(input: tf.Tensor3D):\n      {\n        segmentLogits: tf.Tensor3D,\n        longOffsets: tf.Tensor3D,\n        heatmapScores: tf.Tensor3D,\n        offsets: tf.Tensor3D,\n        displacementFwd: tf.Tensor3D,\n        displacementBwd: tf.Tensor3D,\n        partHeatmaps: tf.Tensor3D\n      } {\n    const {\n      segmentation,\n      longOffsets,\n      heatmapScores,\n      offsets,\n      displacementFwd,\n      displacementBwd,\n      partHeatmaps,\n    } = this.baseModel.predict(input);\n    return {\n      segmentLogits: segmentation,\n      longOffsets,\n      heatmapScores,\n      offsets,\n      displacementFwd,\n      displacementBwd,\n      partHeatmaps\n    };\n  }\n\n  /**\n   * Given an image with people, returns a dictionary of all intermediate\n   * tensors including: 1) a binary array with 1 for the pixels that are part of\n   * the person, and 0 otherwise, 2) heatmapScores, 3) offsets, and 4) paddings.\n   *\n   * @param input ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement)\n   * The input image to feed through the network.\n   *\n   * @param internalResolution Defaults to 'medium'. The internal resolution\n   * that the input is resized to before inference. The larger the\n   * internalResolution the more accurate the model at the cost of slower\n   * prediction times. Available values are 'low', 'medium', 'high', 'full', or\n   * a percentage value between 0 and 1. The values 'low', 'medium', 'high', and\n   * 'full' map to 0.25, 0.5, 0.75, and 1.0 correspondingly.\n   *\n   * @param segmentationThreshold The minimum that segmentation values must have\n   * to be considered part of the person. Affects the generation of the\n   * segmentation mask.\n   *\n   * @return A dictionary containing `segmentation`, `heatmapScores`, `offsets`,\n   * and `padding`:\n   * - `segmentation`: A 2d Tensor with 1 for the pixels that are part of the\n   * person, and 0 otherwise. The width and height correspond to the same\n   * dimensions of the input image.\n   * - `heatmapScores`: A 3d Tensor of the keypoint heatmaps used by\n   * pose estimation decoding.\n   * - `offsets`: A 3d Tensor of the keypoint offsets used by pose\n   * estimation decoding.\n   * - `displacementFwd`: A 3d Tensor of the keypoint forward displacement used\n   * by pose estimation decoding.\n   * - `displacementBwd`: A 3d Tensor of the keypoint backward displacement used\n   * by pose estimation decoding.\n   * - `padding`: The padding (unit pixels) being applied to the input image\n   * before it is fed into the model.\n   */\n  segmentPersonActivation(\n      input: BodyPixInput, internalResolution: BodyPixInternalResolution,\n      segmentationThreshold = 0.5): {\n    segmentation: tf.Tensor2D,\n    heatmapScores: tf.Tensor3D,\n    offsets: tf.Tensor3D,\n    displacementFwd: tf.Tensor3D,\n    displacementBwd: tf.Tensor3D,\n    padding: Padding,\n    internalResolutionHeightAndWidth: [number, number]\n  } {\n    const [height, width] = getInputSize(input);\n    const internalResolutionHeightAndWidth = toInputResolutionHeightAndWidth(\n        internalResolution, this.baseModel.outputStride, [height, width]);\n    const {resized, padding} =\n        padAndResizeTo(input, internalResolutionHeightAndWidth);\n\n    const {\n      segmentation,\n      heatmapScores,\n      offsets,\n      displacementFwd,\n      displacementBwd\n    } = tf.tidy(() => {\n      const {\n        segmentLogits,\n        heatmapScores,\n        offsets,\n        displacementFwd,\n        displacementBwd\n      } = this.predictForPersonSegmentation(resized);\n\n      const [resizedHeight, resizedWidth] = resized.shape;\n\n      const scaledSegmentScores = scaleAndCropToInputTensorShape(\n          segmentLogits, [height, width], [resizedHeight, resizedWidth],\n          [[padding.top, padding.bottom], [padding.left, padding.right]],\n          APPLY_SIGMOID_ACTIVATION);\n\n      return {\n        segmentation:\n            toMaskTensor(scaledSegmentScores.squeeze(), segmentationThreshold),\n        heatmapScores,\n        offsets,\n        displacementFwd,\n        displacementBwd,\n      };\n    });\n    resized.dispose();\n    return {\n      segmentation,\n      heatmapScores,\n      offsets,\n      displacementFwd,\n      displacementBwd,\n      padding,\n      internalResolutionHeightAndWidth\n    };\n  }\n\n  /**\n   * Given an image with many people, returns a PersonSegmentation dictionary\n   * that contains the segmentation mask for all people and a single pose.\n   *\n   * Note: The segmentation mask returned by this method covers all people but\n   * the pose works well for one person. If you want to estimate instance-level\n   * multiple person segmentation & pose for each person, use\n   * `segmentMultiPerson` instead.\n   *\n   * @param input ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement)\n   * The input image to feed through the network.\n   *\n   * @param config PersonInferenceConfig object that contains\n   * parameters for the BodyPix inference using person decoding.\n   *\n   * @return A SemanticPersonSegmentation dictionary that contains height,\n   * width, the flattened binary segmentation mask and the poses for all people.\n   * The width and height correspond to the same dimensions of the input image.\n   * - `height`: The height of the segmentation data in pixel unit.\n   * - `width`: The width of the segmentation data in pixel unit.\n   * - `data`: The flattened Uint8Array of segmentation data. 1 means the pixel\n   * belongs to a person and 0 means the pixel doesn't belong to a person. The\n   * size of the array is equal to `height` x `width` in row-major order.\n   * - `allPoses`: The 2d poses of all people.\n   */\n  async segmentPerson(\n      input: BodyPixInput,\n      config: PersonInferenceConfig = PERSON_INFERENCE_CONFIG):\n      Promise<SemanticPersonSegmentation> {\n    config = {...PERSON_INFERENCE_CONFIG, ...config};\n\n    validatePersonInferenceConfig(config);\n\n    const {\n      segmentation,\n      heatmapScores,\n      offsets,\n      displacementFwd,\n      displacementBwd,\n      padding,\n      internalResolutionHeightAndWidth\n    } =\n        this.segmentPersonActivation(\n            input, config.internalResolution, config.segmentationThreshold);\n\n    const [height, width] = segmentation.shape;\n\n    const result = await segmentation.data() as Uint8Array;\n    segmentation.dispose();\n\n    const [scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf] =\n        await toTensorBuffers3D(\n            [heatmapScores, offsets, displacementFwd, displacementBwd]);\n\n    let poses = decodeMultiplePoses(\n        scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf,\n        this.baseModel.outputStride, config.maxDetections,\n        config.scoreThreshold, config.nmsRadius);\n\n    poses = scaleAndFlipPoses(\n        poses, [height, width], internalResolutionHeightAndWidth, padding,\n        FLIP_POSES_AFTER_SCALING);\n\n    heatmapScores.dispose();\n    offsets.dispose();\n    displacementFwd.dispose();\n    displacementBwd.dispose();\n\n    return {height, width, data: result, allPoses: poses};\n  }\n\n  /**\n   * Given an image with multiple people, returns an *array* of\n   * PersonSegmentation object. Each element in the array corresponding to one\n   * of the people in the input image. In other words, it predicts\n   * instance-level multiple person segmentation & pose for each person.\n   *\n   * The model does standard ImageNet pre-processing before inferring through\n   * the model. The image pixels should have values [0-255].\n   *\n   * @param input\n   * ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement) The input\n   * image to feed through the network.\n   *\n   * @param config MultiPersonInferenceConfig object that contains\n   * parameters for the BodyPix inference using multi-person decoding.\n   *\n   * @return An array of PersonSegmentation object, each containing a width,\n   * height, a binary array (1 for the pixels that are part of the\n   * person, and 0 otherwise) and 2D pose. The array size corresponds to the\n   * number of pixels in the image. The width and height correspond to the\n   * dimensions of the image the binary array is shaped to, which are the same\n   * dimensions of the input image.\n   */\n  async segmentMultiPerson(\n      input: BodyPixInput,\n      config: MultiPersonInstanceInferenceConfig =\n          MULTI_PERSON_INSTANCE_INFERENCE_CONFIG):\n      Promise<PersonSegmentation[]> {\n    config = {...MULTI_PERSON_INSTANCE_INFERENCE_CONFIG, ...config};\n    validateMultiPersonInstanceInferenceConfig(config);\n    const [height, width] = getInputSize(input);\n    const internalResolutionHeightAndWidth = toInputResolutionHeightAndWidth(\n        config.internalResolution, this.baseModel.outputStride,\n        [height, width]);\n\n    const {resized, padding} =\n        padAndResizeTo(input, internalResolutionHeightAndWidth);\n    const {\n      segmentation,\n      longOffsets,\n      heatmapScoresRaw,\n      offsetsRaw,\n      displacementFwdRaw,\n      displacementBwdRaw,\n    } = tf.tidy(() => {\n      const {\n        segmentLogits,\n        longOffsets,\n        heatmapScores,\n        offsets,\n        displacementFwd,\n        displacementBwd,\n      } = this.predictForMultiPersonInstanceSegmentationAndPart(resized);\n      const scaledSegmentScores = scaleAndCropToInputTensorShape(\n          segmentLogits, [height, width], internalResolutionHeightAndWidth,\n          [[padding.top, padding.bottom], [padding.left, padding.right]],\n          APPLY_SIGMOID_ACTIVATION);\n      const longOffsetsResized = false;\n      let scaledLongOffsets;\n      if (longOffsetsResized) {\n        scaledLongOffsets = scaleAndCropToInputTensorShape(\n            longOffsets, [height, width], internalResolutionHeightAndWidth,\n            [[padding.top, padding.bottom], [padding.left, padding.right]],\n            APPLY_SIGMOID_ACTIVATION);\n      } else {\n        scaledLongOffsets = longOffsets;\n      }\n\n      const segmentation = toMaskTensor(\n          scaledSegmentScores.squeeze(), config.segmentationThreshold);\n\n      return {\n        segmentation,\n        longOffsets: scaledLongOffsets,\n        heatmapScoresRaw: heatmapScores,\n        offsetsRaw: offsets,\n        displacementFwdRaw: displacementFwd,\n        displacementBwdRaw: displacementBwd,\n      };\n    });\n\n    const [scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf] =\n        await toTensorBuffers3D([\n          heatmapScoresRaw, offsetsRaw, displacementFwdRaw, displacementBwdRaw\n        ]);\n\n    let poses = decodeMultiplePoses(\n        scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf,\n        this.baseModel.outputStride, config.maxDetections,\n        config.scoreThreshold, config.nmsRadius);\n\n    poses = scaleAndFlipPoses(\n        poses, [height, width], internalResolutionHeightAndWidth, padding,\n        FLIP_POSES_AFTER_SCALING);\n\n    const instanceMasks = await decodePersonInstanceMasks(\n        segmentation, longOffsets, poses, height, width,\n        this.baseModel.outputStride, internalResolutionHeightAndWidth, padding,\n        config.scoreThreshold, config.refineSteps, config.minKeypointScore,\n        config.maxDetections);\n\n    resized.dispose();\n    segmentation.dispose();\n    longOffsets.dispose();\n    heatmapScoresRaw.dispose();\n    offsetsRaw.dispose();\n    displacementFwdRaw.dispose();\n    displacementBwdRaw.dispose();\n\n    return instanceMasks;\n  }\n\n  /**\n   * Given an image with many people, returns a dictionary containing: height,\n   * width, a tensor with a part id from 0-24 for the pixels that are\n   * part of a corresponding body part, and -1 otherwise. This does standard\n   * ImageNet pre-processing before inferring through the model.  The image\n   * should pixels should have values [0-255].\n   *\n   * @param input ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement)\n   * The input image to feed through the network.\n   *\n   * @param internalResolution Defaults to 'medium'. The internal resolution\n   * percentage that the input is resized to before inference. The larger the\n   * internalResolution the more accurate the model at the cost of slower\n   * prediction times. Available values are 'low', 'medium', 'high', 'full', or\n   * a percentage value between 0 and 1. The values 'low', 'medium', 'high', and\n   * 'full' map to 0.25, 0.5, 0.75, and 1.0 correspondingly.\n   *\n   * @param segmentationThreshold The minimum that segmentation values must have\n   * to be considered part of the person.  Affects the clipping of the colored\n   * part image.\n   *\n   * @return  A dictionary containing `partSegmentation`, `heatmapScores`,\n   * `offsets`, and `padding`:\n   * - `partSegmentation`: A 2d Tensor with a part id from 0-24 for\n   * the pixels that are part of a corresponding body part, and -1 otherwise.\n   * - `heatmapScores`: A 3d Tensor of the keypoint heatmaps used by\n   * single-person pose estimation decoding.\n   * - `offsets`: A 3d Tensor of the keypoint offsets used by single-person pose\n   * estimation decoding.\n   * - `displacementFwd`: A 3d Tensor of the keypoint forward displacement\n   * used by pose estimation decoding.\n   * - `displacementBwd`: A 3d Tensor of the keypoint backward displacement used\n   * by pose estimation decoding.\n   * - `padding`: The padding (unit pixels) being applied to the input image\n   * before it is fed into the model.\n   */\n  segmentPersonPartsActivation(\n      input: BodyPixInput, internalResolution: BodyPixInternalResolution,\n      segmentationThreshold = 0.5): {\n    partSegmentation: tf.Tensor2D,\n    heatmapScores: tf.Tensor3D,\n    offsets: tf.Tensor3D,\n    displacementFwd: tf.Tensor3D,\n    displacementBwd: tf.Tensor3D,\n    padding: Padding,\n    internalResolutionHeightAndWidth: [number, number]\n  } {\n    const [height, width] = getInputSize(input);\n    const internalResolutionHeightAndWidth = toInputResolutionHeightAndWidth(\n        internalResolution, this.baseModel.outputStride, [height, width]);\n    const {\n      resized,\n      padding,\n    } = padAndResizeTo(input, internalResolutionHeightAndWidth);\n\n    const {\n      partSegmentation,\n      heatmapScores,\n      offsets,\n      displacementFwd,\n      displacementBwd\n    } = tf.tidy(() => {\n      const {\n        segmentLogits,\n        partHeatmapLogits,\n        heatmapScores,\n        offsets,\n        displacementFwd,\n        displacementBwd\n      } = this.predictForPersonSegmentationAndPart(resized);\n\n      const [resizedHeight, resizedWidth] = resized.shape;\n\n      const scaledSegmentScores = scaleAndCropToInputTensorShape(\n          segmentLogits, [height, width], [resizedHeight, resizedWidth],\n          [[padding.top, padding.bottom], [padding.left, padding.right]],\n          APPLY_SIGMOID_ACTIVATION);\n\n      const scaledPartHeatmapScore = scaleAndCropToInputTensorShape(\n          partHeatmapLogits, [height, width], [resizedHeight, resizedWidth],\n          [[padding.top, padding.bottom], [padding.left, padding.right]],\n          APPLY_SIGMOID_ACTIVATION);\n      const segmentation =\n          toMaskTensor(scaledSegmentScores.squeeze(), segmentationThreshold);\n      return {\n        partSegmentation:\n            decodePartSegmentation(segmentation, scaledPartHeatmapScore),\n        heatmapScores,\n        offsets,\n        displacementFwd,\n        displacementBwd,\n      };\n    });\n    resized.dispose();\n    return {\n      partSegmentation,\n      heatmapScores,\n      offsets,\n      displacementFwd,\n      displacementBwd,\n      padding,\n      internalResolutionHeightAndWidth\n    };\n  }\n\n  /**\n   * Given an image with many people, returns a PartSegmentation dictionary that\n   * contains the body part segmentation mask for all people and a single pose.\n   *\n   * Note: The body part segmentation mask returned by this method covers all\n   * people but the pose works well when there is one person. If you want to\n   * estimate instance-level multiple person body part segmentation & pose for\n   * each person, use `segmentMultiPersonParts` instead.\n   *\n   * @param input ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement)\n   * The input image to feed through the network.\n   *\n   * @param config PersonInferenceConfig object that contains\n   * parameters for the BodyPix inference using single person decoding.\n   *\n   * @return A SemanticPartSegmentation dictionary that contains height, width,\n   * the flattened binary segmentation mask and the pose for the person. The\n   * width and height correspond to the same dimensions of the input image.\n   * - `height`: The height of the person part segmentation data in pixel unit.\n   * - `width`: The width of the person part segmentation data in pixel unit.\n   * - `data`: The flattened Int32Array of person part segmentation data with a\n   * part id from 0-24 for the pixels that are part of a corresponding body\n   * part, and -1 otherwise. The size of the array is equal to `height` x\n   * `width` in row-major order.\n   * - `allPoses`: The 2d poses of all people.\n   */\n  async segmentPersonParts(\n      input: BodyPixInput,\n      config: PersonInferenceConfig = PERSON_INFERENCE_CONFIG):\n      Promise<SemanticPartSegmentation> {\n    config = {...PERSON_INFERENCE_CONFIG, ...config};\n\n    validatePersonInferenceConfig(config);\n    const {\n      partSegmentation,\n      heatmapScores,\n      offsets,\n      displacementFwd,\n      displacementBwd,\n      padding,\n      internalResolutionHeightAndWidth\n    } =\n        this.segmentPersonPartsActivation(\n            input, config.internalResolution, config.segmentationThreshold);\n\n    const [height, width] = partSegmentation.shape;\n    const data = await partSegmentation.data() as Int32Array;\n    partSegmentation.dispose();\n\n    const [scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf] =\n        await toTensorBuffers3D(\n            [heatmapScores, offsets, displacementFwd, displacementBwd]);\n\n    let poses = decodeMultiplePoses(\n        scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf,\n        this.baseModel.outputStride, config.maxDetections,\n        config.scoreThreshold, config.nmsRadius);\n\n    poses = scaleAndFlipPoses(\n        poses, [height, width], internalResolutionHeightAndWidth, padding,\n        FLIP_POSES_AFTER_SCALING);\n\n    heatmapScores.dispose();\n    offsets.dispose();\n    displacementFwd.dispose();\n    displacementBwd.dispose();\n\n    return {height, width, data, allPoses: poses};\n  }\n\n  /**\n   * Given an image with multiple people, returns an *array* of PartSegmentation\n   * object. Each element in the array corresponding to one\n   * of the people in the input image. In other words, it predicts\n   * instance-level multiple person body part segmentation & pose for each\n   * person.\n   *\n   * This does standard ImageNet pre-processing before inferring through\n   * the model. The image pixels should have values [0-255].\n   *\n   * @param input\n   * ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement) The input\n   * image to feed through the network.\n   *\n   * @param config MultiPersonInferenceConfig object that contains\n   * parameters for the BodyPix inference using multi-person decoding.\n   *\n   * @return An array of PartSegmentation object, each containing a width,\n   * height, a flattened array (with part id from 0-24 for the pixels that are\n   * part of a corresponding body part, and -1 otherwise) and 2D pose. The width\n   * and height correspond to the dimensions of the image. Each flattened part\n   * segmentation array size is equal to `height` x `width`.\n   */\n  async segmentMultiPersonParts(\n      input: BodyPixInput,\n      config: MultiPersonInstanceInferenceConfig =\n          MULTI_PERSON_INSTANCE_INFERENCE_CONFIG): Promise<PartSegmentation[]> {\n    config = {...MULTI_PERSON_INSTANCE_INFERENCE_CONFIG, ...config};\n\n    validateMultiPersonInstanceInferenceConfig(config);\n    const [height, width] = getInputSize(input);\n    const internalResolutionHeightAndWidth = toInputResolutionHeightAndWidth(\n        config.internalResolution, this.baseModel.outputStride,\n        [height, width]);\n    const {resized, padding} =\n        padAndResizeTo(input, internalResolutionHeightAndWidth);\n    const {\n      segmentation,\n      longOffsets,\n      heatmapScoresRaw,\n      offsetsRaw,\n      displacementFwdRaw,\n      displacementBwdRaw,\n      partSegmentation,\n    } = tf.tidy(() => {\n      const {\n        segmentLogits,\n        longOffsets,\n        heatmapScores,\n        offsets,\n        displacementFwd,\n        displacementBwd,\n        partHeatmaps\n      } = this.predictForMultiPersonInstanceSegmentationAndPart(resized);\n\n      // decoding with scaling.\n      const scaledSegmentScores = scaleAndCropToInputTensorShape(\n          segmentLogits, [height, width], internalResolutionHeightAndWidth,\n          [[padding.top, padding.bottom], [padding.left, padding.right]],\n          APPLY_SIGMOID_ACTIVATION);\n\n      // decoding with scaling.\n      const scaledPartSegmentationScores = scaleAndCropToInputTensorShape(\n          partHeatmaps, [height, width], internalResolutionHeightAndWidth,\n          [[padding.top, padding.bottom], [padding.left, padding.right]],\n          APPLY_SIGMOID_ACTIVATION);\n\n      const scaledLongOffsets = longOffsets;\n      const segmentation = toMaskTensor(\n          scaledSegmentScores.squeeze(), config.segmentationThreshold);\n      const partSegmentation =\n          decodeOnlyPartSegmentation(scaledPartSegmentationScores);\n      return {\n        segmentation,\n        longOffsets: scaledLongOffsets,\n        heatmapScoresRaw: heatmapScores,\n        offsetsRaw: offsets,\n        displacementFwdRaw: displacementFwd,\n        displacementBwdRaw: displacementBwd,\n        partSegmentation\n      };\n    });\n\n    const [scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf] =\n        await toTensorBuffers3D([\n          heatmapScoresRaw, offsetsRaw, displacementFwdRaw, displacementBwdRaw\n        ]);\n\n    let poses = decodeMultiplePoses(\n        scoresBuf, offsetsBuf, displacementsFwdBuf, displacementsBwdBuf,\n        this.baseModel.outputStride, config.maxDetections,\n        config.scoreThreshold, config.nmsRadius);\n\n    poses = scaleAndFlipPoses(\n        poses, [height, width], internalResolutionHeightAndWidth, padding,\n        FLIP_POSES_AFTER_SCALING);\n\n    const instanceMasks = await decodePersonInstancePartMasks(\n        segmentation, longOffsets, partSegmentation, poses, height, width,\n        this.baseModel.outputStride, internalResolutionHeightAndWidth, padding,\n        config.scoreThreshold, config.refineSteps, config.minKeypointScore,\n        config.maxDetections);\n\n    resized.dispose();\n    segmentation.dispose();\n    longOffsets.dispose();\n    heatmapScoresRaw.dispose();\n    offsetsRaw.dispose();\n    displacementFwdRaw.dispose();\n    displacementBwdRaw.dispose();\n    partSegmentation.dispose();\n\n    return instanceMasks;\n  }\n\n  public dispose() {\n    this.baseModel.dispose();\n  }\n}\n\n/**\n * Loads the MobileNet BodyPix model.\n */\nasync function loadMobileNet(config: ModelConfig): Promise<BodyPix> {\n  const outputStride = config.outputStride;\n  const quantBytes = config.quantBytes;\n  const multiplier = config.multiplier;\n  if (tf == null) {\n    throw new Error(\n        `Cannot find TensorFlow.js. If you are using a <script> tag, please ` +\n        `also include @tensorflow/tfjs on the page before using this\n        model.`);\n  }\n\n  const url = mobileNetSavedModel(outputStride, multiplier, quantBytes);\n  const graphModel = await tfconv.loadGraphModel(config.modelUrl || url);\n  const mobilenet = new MobileNet(graphModel, outputStride);\n  return new BodyPix(mobilenet);\n}\n\n/**\n * Loads the ResNet BodyPix model.\n */\nasync function loadResNet(config: ModelConfig): Promise<BodyPix> {\n  const outputStride = config.outputStride;\n  const quantBytes = config.quantBytes;\n  if (tf == null) {\n    throw new Error(\n        `Cannot find TensorFlow.js. If you are using a <script> tag, please ` +\n        `also include @tensorflow/tfjs on the page before using this\n        model.`);\n  }\n\n  const url = resNet50SavedModel(outputStride, quantBytes);\n  const graphModel = await tfconv.loadGraphModel(config.modelUrl || url);\n  const resnet = new ResNet(graphModel, outputStride);\n  return new BodyPix(resnet);\n}\n\n/**\n * Loads the BodyPix model instance from a checkpoint, with the ResNet\n * or MobileNet architecture. The model to be loaded is configurable using the\n * config dictionary ModelConfig. Please find more details in the\n * documentation of the ModelConfig.\n *\n * @param config ModelConfig dictionary that contains parameters for\n * the BodyPix loading process. Please find more details of each parameters\n * in the documentation of the ModelConfig interface. The predefined\n * `MOBILENET_V1_CONFIG` and `RESNET_CONFIG` can also be used as references\n * for defining your customized config.\n */\nexport async function load(config: ModelConfig = MOBILENET_V1_CONFIG):\n    Promise<BodyPix> {\n  config = validateModelConfig(config);\n  if (config.architecture === 'ResNet50') {\n    return loadResNet(config);\n  } else if (config.architecture === 'MobileNetV1') {\n    return loadMobileNet(config);\n  } else {\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// method copied from bGlur in https://codepen.io/zhaojun/pen/zZmRQe\nexport function cpuBlur(\n    canvas: HTMLCanvasElement,\n    image: HTMLImageElement|HTMLVideoElement|HTMLCanvasElement, blur: number) {\n  const ctx = canvas.getContext('2d');\n\n  let sum = 0;\n  const delta = 5;\n  const alphaLeft = 1 / (2 * Math.PI * delta * delta);\n  const step = blur < 3 ? 1 : 2;\n  for (let y = -blur; y <= blur; y += step) {\n    for (let x = -blur; x <= blur; x += step) {\n      const weight =\n          alphaLeft * Math.exp(-(x * x + y * y) / (2 * delta * delta));\n      sum += weight;\n    }\n  }\n  for (let y = -blur; y <= blur; y += step) {\n    for (let x = -blur; x <= blur; x += step) {\n      ctx.globalAlpha = alphaLeft *\n          Math.exp(-(x * x + y * y) / (2 * delta * delta)) / sum * blur;\n      ctx.drawImage(image, x, y);\n    }\n  }\n  ctx.globalAlpha = 1;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {cpuBlur} from './blur';\nimport {Color, PartSegmentation, PersonSegmentation} from './types';\nimport {SemanticPartSegmentation, SemanticPersonSegmentation} from './types';\nimport {getInputSize} from './util';\n\nconst offScreenCanvases: {[name: string]: HTMLCanvasElement} = {};\n\ntype ImageType = HTMLImageElement|HTMLVideoElement|HTMLCanvasElement;\ntype HasDimensions = {\n  width: number,\n  height: number\n};\n\nfunction isSafari() {\n  return (/^((?!chrome|android).)*safari/i.test(navigator.userAgent));\n}\n\nfunction assertSameDimensions(\n    {width: widthA, height: heightA}: HasDimensions,\n    {width: widthB, height: heightB}: HasDimensions, nameA: string,\n    nameB: string) {\n  if (widthA !== widthB || heightA !== heightB) {\n    throw new Error(`error: dimensions must match. ${nameA} has dimensions ${\n        widthA}x${heightA}, ${nameB} has dimensions ${widthB}x${heightB}`);\n  }\n}\n\nfunction flipCanvasHorizontal(canvas: HTMLCanvasElement) {\n  const ctx = canvas.getContext('2d');\n  ctx.scale(-1, 1);\n  ctx.translate(-canvas.width, 0);\n}\n\nfunction drawWithCompositing(\n    ctx: CanvasRenderingContext2D, image: HTMLCanvasElement|ImageType,\n    compositOperation: string) {\n  ctx.globalCompositeOperation = compositOperation;\n  ctx.drawImage(image, 0, 0);\n}\n\nfunction createOffScreenCanvas(): HTMLCanvasElement {\n  const offScreenCanvas = document.createElement('canvas');\n  return offScreenCanvas;\n}\n\nfunction ensureOffscreenCanvasCreated(id: string): HTMLCanvasElement {\n  if (!offScreenCanvases[id]) {\n    offScreenCanvases[id] = createOffScreenCanvas();\n  }\n  return offScreenCanvases[id];\n}\n\nfunction drawAndBlurImageOnCanvas(\n    image: ImageType, blurAmount: number, canvas: HTMLCanvasElement) {\n  const {height, width} = image;\n  const ctx = canvas.getContext('2d');\n  canvas.width = width;\n  canvas.height = height;\n  ctx.clearRect(0, 0, width, height);\n  ctx.save();\n  if (isSafari()) {\n    cpuBlur(canvas, image, blurAmount);\n  } else {\n    // tslint:disable:no-any\n    (ctx as any).filter = `blur(${blurAmount}px)`;\n    ctx.drawImage(image, 0, 0, width, height);\n  }\n  ctx.restore();\n}\n\nfunction drawAndBlurImageOnOffScreenCanvas(\n    image: ImageType, blurAmount: number,\n    offscreenCanvasName: string): HTMLCanvasElement {\n  const canvas = ensureOffscreenCanvasCreated(offscreenCanvasName);\n  if (blurAmount === 0) {\n    renderImageToCanvas(image, canvas);\n  } else {\n    drawAndBlurImageOnCanvas(image, blurAmount, canvas);\n  }\n  return canvas;\n}\n\nfunction renderImageToCanvas(image: ImageType, canvas: HTMLCanvasElement) {\n  const {width, height} = image;\n  canvas.width = width;\n  canvas.height = height;\n  const ctx = canvas.getContext('2d');\n\n  ctx.drawImage(image, 0, 0, width, height);\n}\n/**\n * Draw an image on a canvas\n */\nfunction renderImageDataToCanvas(image: ImageData, canvas: HTMLCanvasElement) {\n  canvas.width = image.width;\n  canvas.height = image.height;\n  const ctx = canvas.getContext('2d');\n\n  ctx.putImageData(image, 0, 0);\n}\n\nfunction renderImageDataToOffScreenCanvas(\n    image: ImageData, canvasName: string): HTMLCanvasElement {\n  const canvas = ensureOffscreenCanvasCreated(canvasName);\n  renderImageDataToCanvas(image, canvas);\n\n  return canvas;\n}\n\n/**\n * Given the output from estimating multi-person segmentation, generates an\n * image with foreground and background color at each pixel determined by the\n * corresponding binary segmentation value at the pixel from the output.  In\n * other words, pixels where there is a person will be colored with foreground\n * color and where there is not a person will be colored with background color.\n *\n * @param personOrPartSegmentation The output from\n * `segmentPerson`, `segmentMultiPerson`,\n * `segmentPersonParts` or `segmentMultiPersonParts`. They can\n * be SemanticPersonSegmentation object, an array of PersonSegmentation object,\n * SemanticPartSegmentation object, or an array of PartSegmentation object.\n *\n * @param foreground Default to {r:0, g:0, b:0, a: 0}. The foreground color\n * (r,g,b,a) for visualizing pixels that belong to people.\n *\n * @param background Default to {r:0, g:0, b:0, a: 255}. The background color\n * (r,g,b,a) for visualizing pixels that don't belong to people.\n *\n * @param drawContour Default to false. Whether to draw the contour around each\n * person's segmentation mask or body part mask.\n *\n * @param foregroundIds Default to [1]. The integer values that represent\n * foreground. For person segmentation, 1 is the foreground. For body part\n * segmentation, it can be a subset of all body parts ids.\n *\n * @returns An ImageData with the same width and height of\n * all the PersonSegmentation in multiPersonSegmentation, with opacity and\n * transparency at each pixel determined by the corresponding binary\n * segmentation value at the pixel from the output.\n */\nexport function toMask(\n    personOrPartSegmentation: SemanticPersonSegmentation|\n    SemanticPartSegmentation|PersonSegmentation[]|PartSegmentation[],\n    foreground: Color = {\n      r: 0,\n      g: 0,\n      b: 0,\n      a: 0\n    },\n    background: Color = {\n      r: 0,\n      g: 0,\n      b: 0,\n      a: 255\n    },\n    drawContour = false, foregroundIds: number[] = [1]): ImageData {\n  if (Array.isArray(personOrPartSegmentation) &&\n      personOrPartSegmentation.length === 0) {\n    return null;\n  }\n\n  let multiPersonOrPartSegmentation:\n      Array<SemanticPersonSegmentation|SemanticPartSegmentation|\n            PersonSegmentation|PartSegmentation>;\n\n  if (!Array.isArray(personOrPartSegmentation)) {\n    multiPersonOrPartSegmentation = [personOrPartSegmentation];\n  } else {\n    multiPersonOrPartSegmentation = personOrPartSegmentation;\n  }\n\n  const {width, height} = multiPersonOrPartSegmentation[0];\n  const bytes = new Uint8ClampedArray(width * height * 4);\n\n  function drawStroke(\n      bytes: Uint8ClampedArray, row: number, column: number, width: number,\n      radius: number, color: Color = {r: 0, g: 255, b: 255, a: 255}) {\n    for (let i = -radius; i <= radius; i++) {\n      for (let j = -radius; j <= radius; j++) {\n        if (i !== 0 && j !== 0) {\n          const n = (row + i) * width + (column + j);\n          bytes[4 * n + 0] = color.r;\n          bytes[4 * n + 1] = color.g;\n          bytes[4 * n + 2] = color.b;\n          bytes[4 * n + 3] = color.a;\n        }\n      }\n    }\n  }\n\n  function isSegmentationBoundary(\n      segmentationData: Uint8Array|Int32Array,\n      row: number,\n      column: number,\n      width: number,\n      foregroundIds: number[] = [1],\n      radius = 1,\n      ): boolean {\n    let numberBackgroundPixels = 0;\n    for (let i = -radius; i <= radius; i++) {\n      for (let j = -radius; j <= radius; j++) {\n        if (i !== 0 && j !== 0) {\n          const n = (row + i) * width + (column + j);\n          if (!foregroundIds.some(id => id === segmentationData[n])) {\n            numberBackgroundPixels += 1;\n          }\n        }\n      }\n    }\n    return numberBackgroundPixels > 0;\n  }\n\n  for (let i = 0; i < height; i += 1) {\n    for (let j = 0; j < width; j += 1) {\n      const n = i * width + j;\n      bytes[4 * n + 0] = background.r;\n      bytes[4 * n + 1] = background.g;\n      bytes[4 * n + 2] = background.b;\n      bytes[4 * n + 3] = background.a;\n      for (let k = 0; k < multiPersonOrPartSegmentation.length; k++) {\n        if (foregroundIds.some(\n                id => id === multiPersonOrPartSegmentation[k].data[n])) {\n          bytes[4 * n] = foreground.r;\n          bytes[4 * n + 1] = foreground.g;\n          bytes[4 * n + 2] = foreground.b;\n          bytes[4 * n + 3] = foreground.a;\n          const isBoundary = isSegmentationBoundary(\n              multiPersonOrPartSegmentation[k].data, i, j, width,\n              foregroundIds);\n          if (drawContour && i - 1 >= 0 && i + 1 < height && j - 1 >= 0 &&\n              j + 1 < width && isBoundary) {\n            drawStroke(bytes, i, j, width, 1);\n          }\n        }\n      }\n    }\n  }\n\n  return new ImageData(bytes, width, height);\n}\n\nconst RAINBOW_PART_COLORS: Array<[number, number, number]> = [\n  [110, 64, 170], [143, 61, 178], [178, 60, 178], [210, 62, 167],\n  [238, 67, 149], [255, 78, 125], [255, 94, 99],  [255, 115, 75],\n  [255, 140, 56], [239, 167, 47], [217, 194, 49], [194, 219, 64],\n  [175, 240, 91], [135, 245, 87], [96, 247, 96],  [64, 243, 115],\n  [40, 234, 141], [28, 219, 169], [26, 199, 194], [33, 176, 213],\n  [47, 150, 224], [65, 125, 224], [84, 101, 214], [99, 81, 195]\n];\n\n/**\n * Given the output from person body part segmentation (or multi-person\n * instance body part segmentation) and an array of colors indexed by part id,\n * generates an image with the corresponding color for each part at each pixel,\n * and white pixels where there is no part.\n *\n * @param partSegmentation The output from segmentPersonParts\n * or segmentMultiPersonParts. The former is a SemanticPartSegmentation\n * object and later is an array of PartSegmentation object.\n *\n * @param partColors A multi-dimensional array of rgb colors indexed by\n * part id.  Must have 24 colors, one for every part.\n *\n * @returns An ImageData with the same width and height of all the element in\n * multiPersonPartSegmentation, with the corresponding color for each part at\n * each pixel, and black pixels where there is no part.\n */\nexport function toColoredPartMask(\n    partSegmentation: SemanticPartSegmentation|PartSegmentation[],\n    partColors: Array<[number, number, number]> =\n        RAINBOW_PART_COLORS): ImageData {\n  if (Array.isArray(partSegmentation) && partSegmentation.length === 0) {\n    return null;\n  }\n\n  let multiPersonPartSegmentation;\n  if (!Array.isArray(partSegmentation)) {\n    multiPersonPartSegmentation = [partSegmentation];\n  } else {\n    multiPersonPartSegmentation = partSegmentation;\n  }\n  const {width, height} = multiPersonPartSegmentation[0];\n  const bytes = new Uint8ClampedArray(width * height * 4);\n\n  for (let i = 0; i < height * width; ++i) {\n    // invert mask.  Invert the segmentation mask.\n    const j = i * 4;\n    bytes[j + 0] = 255;\n    bytes[j + 1] = 255;\n    bytes[j + 2] = 255;\n    bytes[j + 3] = 255;\n    for (let k = 0; k < multiPersonPartSegmentation.length; k++) {\n      const partId = multiPersonPartSegmentation[k].data[i];\n      if (partId !== -1) {\n        const color = partColors[partId];\n        if (!color) {\n          throw new Error(`No color could be found for part id ${partId}`);\n        }\n        bytes[j + 0] = color[0];\n        bytes[j + 1] = color[1];\n        bytes[j + 2] = color[2];\n        bytes[j + 3] = 255;\n      }\n    }\n  }\n  return new ImageData(bytes, width, height);\n}\n\nconst CANVAS_NAMES = {\n  blurred: 'blurred',\n  blurredMask: 'blurred-mask',\n  mask: 'mask',\n  lowresPartMask: 'lowres-part-mask',\n};\n\n/**\n * Given an image and a maskImage of type ImageData, draws the image with the\n * mask on top of it onto a canvas.\n *\n * @param canvas The canvas to be drawn onto.\n *\n * @param image The original image to apply the mask to.\n *\n * @param maskImage An ImageData containing the mask.  Ideally this should be\n * generated by toMask or toColoredPartMask.\n *\n * @param maskOpacity The opacity of the mask when drawing it on top of the\n * image. Defaults to 0.7. Should be a float between 0 and 1.\n *\n * @param maskBlurAmount How many pixels to blur the mask by. Defaults to 0.\n * Should be an integer between 0 and 20.\n *\n * @param flipHorizontal If the result should be flipped horizontally.  Defaults\n * to false.\n */\nexport function drawMask(\n    canvas: HTMLCanvasElement, image: ImageType, maskImage: ImageData|null,\n    maskOpacity = 0.7, maskBlurAmount = 0, flipHorizontal = false) {\n  const [height, width] = getInputSize(image);\n  canvas.width = width;\n  canvas.height = height;\n\n  const ctx = canvas.getContext('2d');\n  ctx.save();\n  if (flipHorizontal) {\n    flipCanvasHorizontal(canvas);\n  }\n\n  ctx.drawImage(image, 0, 0);\n\n  ctx.globalAlpha = maskOpacity;\n  if (maskImage) {\n    assertSameDimensions({width, height}, maskImage, 'image', 'mask');\n\n    const mask = renderImageDataToOffScreenCanvas(maskImage, CANVAS_NAMES.mask);\n\n    const blurredMask = drawAndBlurImageOnOffScreenCanvas(\n        mask, maskBlurAmount, CANVAS_NAMES.blurredMask);\n    ctx.drawImage(blurredMask, 0, 0, width, height);\n  }\n  ctx.restore();\n}\n\n/**\n * Given an image and a maskImage of type ImageData, draws the image with the\n * pixelated mask on top of it onto a canvas.\n *\n * @param canvas The canvas to be drawn onto.\n *\n * @param image The original image to apply the mask to.\n *\n * @param maskImage An ImageData containing the mask.  Ideally this should be\n * generated by toColoredPartMask.\n *\n * @param maskOpacity The opacity of the mask when drawing it on top of the\n * image. Defaults to 0.7. Should be a float between 0 and 1.\n *\n * @param maskBlurAmount How many pixels to blur the mask by. Defaults to 0.\n * Should be an integer between 0 and 20.\n *\n * @param flipHorizontal If the result should be flipped horizontally.  Defaults\n * to false.\n *\n * @param pixelCellWidth The width of each pixel cell. Default to 10 px.\n */\nexport function drawPixelatedMask(\n    canvas: HTMLCanvasElement, image: ImageType, maskImage: ImageData,\n    maskOpacity = 0.7, maskBlurAmount = 0, flipHorizontal = false,\n    pixelCellWidth = 10.0) {\n  const [height, width] = getInputSize(image);\n  assertSameDimensions({width, height}, maskImage, 'image', 'mask');\n\n  const mask = renderImageDataToOffScreenCanvas(maskImage, CANVAS_NAMES.mask);\n  const blurredMask = drawAndBlurImageOnOffScreenCanvas(\n      mask, maskBlurAmount, CANVAS_NAMES.blurredMask);\n\n  canvas.width = blurredMask.width;\n  canvas.height = blurredMask.height;\n\n  const ctx = canvas.getContext('2d');\n  ctx.save();\n  if (flipHorizontal) {\n    flipCanvasHorizontal(canvas);\n  }\n\n  const offscreenCanvas =\n      ensureOffscreenCanvasCreated(CANVAS_NAMES.lowresPartMask);\n  const offscreenCanvasCtx = offscreenCanvas.getContext('2d');\n  offscreenCanvas.width = blurredMask.width * (1.0 / pixelCellWidth);\n  offscreenCanvas.height = blurredMask.height * (1.0 / pixelCellWidth);\n  offscreenCanvasCtx.drawImage(\n      blurredMask, 0, 0, blurredMask.width, blurredMask.height, 0, 0,\n      offscreenCanvas.width, offscreenCanvas.height);\n  ctx.imageSmoothingEnabled = false;\n  ctx.drawImage(\n      offscreenCanvas, 0, 0, offscreenCanvas.width, offscreenCanvas.height, 0,\n      0, canvas.width, canvas.height);\n\n  // Draws vertical grid lines that are `pixelCellWidth` apart from each other.\n  for (let i = 0; i < offscreenCanvas.width; i++) {\n    ctx.beginPath();\n    ctx.strokeStyle = '#ffffff';\n    ctx.moveTo(pixelCellWidth * i, 0);\n    ctx.lineTo(pixelCellWidth * i, canvas.height);\n    ctx.stroke();\n  }\n\n  // Draws horizontal grid lines that are `pixelCellWidth` apart from each\n  // other.\n  for (let i = 0; i < offscreenCanvas.height; i++) {\n    ctx.beginPath();\n    ctx.strokeStyle = '#ffffff';\n    ctx.moveTo(0, pixelCellWidth * i);\n    ctx.lineTo(canvas.width, pixelCellWidth * i);\n    ctx.stroke();\n  }\n\n  ctx.globalAlpha = 1.0 - maskOpacity;\n  ctx.drawImage(image, 0, 0, blurredMask.width, blurredMask.height);\n  ctx.restore();\n}\n\nfunction createPersonMask(\n    multiPersonSegmentation: PersonSegmentation[]|SemanticPersonSegmentation,\n    edgeBlurAmount: number): HTMLCanvasElement {\n  const backgroundMaskImage = toMask(\n      multiPersonSegmentation, {r: 0, g: 0, b: 0, a: 255},\n      {r: 0, g: 0, b: 0, a: 0});\n\n  const backgroundMask =\n      renderImageDataToOffScreenCanvas(backgroundMaskImage, CANVAS_NAMES.mask);\n  if (edgeBlurAmount === 0) {\n    return backgroundMask;\n  } else {\n    return drawAndBlurImageOnOffScreenCanvas(\n        backgroundMask, edgeBlurAmount, CANVAS_NAMES.blurredMask);\n  }\n}\n\n/**\n * Given a personSegmentation and an image, draws the image with its background\n * blurred onto the canvas.\n *\n * @param canvas The canvas to draw the background-blurred image onto.\n *\n * @param image The image to blur the background of and draw.\n *\n * @param personSegmentation A SemanticPersonSegmentation or an array of\n * PersonSegmentation object.\n *\n * @param backgroundBlurAmount How many pixels in the background blend into each\n * other.  Defaults to 3. Should be an integer between 1 and 20.\n *\n * @param edgeBlurAmount How many pixels to blur on the edge between the person\n * and the background by.  Defaults to 3. Should be an integer between 0 and 20.\n *\n * @param flipHorizontal If the output should be flipped horizontally.  Defaults\n * to false.\n */\nexport function drawBokehEffect(\n    canvas: HTMLCanvasElement, image: ImageType,\n    multiPersonSegmentation: SemanticPersonSegmentation|PersonSegmentation[],\n    backgroundBlurAmount = 3, edgeBlurAmount = 3, flipHorizontal = false) {\n  const blurredImage = drawAndBlurImageOnOffScreenCanvas(\n      image, backgroundBlurAmount, CANVAS_NAMES.blurred);\n  canvas.width = blurredImage.width;\n  canvas.height = blurredImage.height;\n\n  const ctx = canvas.getContext('2d');\n\n  if (Array.isArray(multiPersonSegmentation) &&\n      multiPersonSegmentation.length === 0) {\n    ctx.drawImage(blurredImage, 0, 0);\n    return;\n  }\n\n  const personMask = createPersonMask(multiPersonSegmentation, edgeBlurAmount);\n\n  ctx.save();\n  if (flipHorizontal) {\n    flipCanvasHorizontal(canvas);\n  }\n  // draw the original image on the final canvas\n  const [height, width] = getInputSize(image);\n  ctx.drawImage(image, 0, 0, width, height);\n\n  // \"destination-in\" - \"The existing canvas content is kept where both the\n  // new shape and existing canvas content overlap. Everything else is made\n  // transparent.\"\n  // crop what's not the person using the mask from the original image\n  drawWithCompositing(ctx, personMask, 'destination-in');\n  // \"destination-over\" - \"The existing canvas content is kept where both the\n  // new shape and existing canvas content overlap. Everything else is made\n  // transparent.\"\n  // draw the blurred background on top of the original image where it doesn't\n  // overlap.\n  drawWithCompositing(ctx, blurredImage, 'destination-over');\n  ctx.restore();\n}\n\nfunction createBodyPartMask(\n    multiPersonPartSegmentation: SemanticPartSegmentation|PartSegmentation[],\n    bodyPartIdsToMask: number[], edgeBlurAmount: number): HTMLCanvasElement {\n  const backgroundMaskImage = toMask(\n      multiPersonPartSegmentation, {r: 0, g: 0, b: 0, a: 0},\n      {r: 0, g: 0, b: 0, a: 255}, true, bodyPartIdsToMask);\n\n  const backgroundMask =\n      renderImageDataToOffScreenCanvas(backgroundMaskImage, CANVAS_NAMES.mask);\n  if (edgeBlurAmount === 0) {\n    return backgroundMask;\n  } else {\n    return drawAndBlurImageOnOffScreenCanvas(\n        backgroundMask, edgeBlurAmount, CANVAS_NAMES.blurredMask);\n  }\n}\n\n/**\n * Given a personSegmentation and an image, draws the image with its background\n * blurred onto the canvas.\n *\n * @param canvas The canvas to draw the background-blurred image onto.\n *\n * @param image The image to blur the background of and draw.\n *\n * @param partSegmentation A SemanticPartSegmentation or an array of\n * PartSegmentation object.\n *\n * @param bodyPartIdsToBlur Default to [0, 1] (left-face and right-face). An\n * array of body part ids to blur. Each must be one of the 24 body part ids.\n *\n * @param backgroundBlurAmount How many pixels in the background blend into each\n * other.  Defaults to 3. Should be an integer between 1 and 20.\n *\n * @param edgeBlurAmount How many pixels to blur on the edge between the person\n * and the background by.  Defaults to 3. Should be an integer between 0 and 20.\n *\n * @param flipHorizontal If the output should be flipped horizontally.  Defaults\n * to false.\n */\nexport function blurBodyPart(\n    canvas: HTMLCanvasElement, image: ImageType,\n    partSegmentation: SemanticPartSegmentation|PartSegmentation[],\n    bodyPartIdsToBlur = [0, 1], backgroundBlurAmount = 3, edgeBlurAmount = 3,\n    flipHorizontal = false) {\n  const blurredImage = drawAndBlurImageOnOffScreenCanvas(\n      image, backgroundBlurAmount, CANVAS_NAMES.blurred);\n  canvas.width = blurredImage.width;\n  canvas.height = blurredImage.height;\n\n  const ctx = canvas.getContext('2d');\n\n  if (Array.isArray(partSegmentation) && partSegmentation.length === 0) {\n    ctx.drawImage(blurredImage, 0, 0);\n    return;\n  }\n  const bodyPartMask =\n      createBodyPartMask(partSegmentation, bodyPartIdsToBlur, edgeBlurAmount);\n\n  ctx.save();\n  if (flipHorizontal) {\n    flipCanvasHorizontal(canvas);\n  }\n  // draw the original image on the final canvas\n  const [height, width] = getInputSize(image);\n  ctx.drawImage(image, 0, 0, width, height);\n\n  // \"destination-in\" - \"The existing canvas content is kept where both the\n  // new shape and existing canvas content overlap. Everything else is made\n  // transparent.\"\n  // crop what's not the person using the mask from the original image\n  drawWithCompositing(ctx, bodyPartMask, 'destination-in');\n  // \"destination-over\" - \"The existing canvas content is kept where both the\n  // new shape and existing canvas content overlap. Everything else is made\n  // transparent.\"\n  // draw the blurred background on top of the original image where it doesn't\n  // overlap.\n  drawWithCompositing(ctx, blurredImage, 'destination-over');\n  ctx.restore();\n}\n","export const PART_CHANNELS: string[] = [\n  'left_face',\n  'right_face',\n  'left_upper_arm_front',\n  'left_upper_arm_back',\n  'right_upper_arm_front',\n  'right_upper_arm_back',\n  'left_lower_arm_front',\n  'left_lower_arm_back',\n  'right_lower_arm_front',\n  'right_lower_arm_back',\n  'left_hand',\n  'right_hand',\n  'torso_front',\n  'torso_back',\n  'left_upper_leg_front',\n  'left_upper_leg_back',\n  'right_upper_leg_front',\n  'right_upper_leg_back',\n  'left_lower_leg_front',\n  'left_lower_leg_back',\n  'right_lower_leg_front',\n  'right_lower_leg_back',\n  'left_feet',\n  'right_feet'\n];\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '2.0.5';\nexport {version};\n"],"names":["tf.oneHot","tf.tidy","tf.scalar","tf.range","tf.util","tslib_1.__extends","tf.div","tf.tensor","tf.backend","getBackend","tf.Tensor","tf.browser","tf.pad3d","tf.image","tfconv.loadGraphModel"],"mappings":"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"}